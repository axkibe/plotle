/*
| Generates jools like objects from a jools definition.
|
| Authors: Axel Kittenberger
*/

/*
| Capsule (to make jshint happy)
*/
(function( ) {
'use strict';


var
	Jools =
		require( '../shared/jools' );

if( typeof( require ) === 'undefined' )
{
	throw new Error(
		'this code requires node!'
	);
}


/*
| Generates code from a jools object definition
*/
var
	jgen =
		function(
			jdef  // the jools object definition
		)
{
	var
		a,
		aZ,

		aname,

		// shortcut
		attr =
			jdef.attributes,

		// alphabetical sorted attribute names
		aList =
			null,

		// alphabetical sorted attribute names
		// including 'inherit'
		aListPlus =
			null,

		r =
			[ ];

	// tests if all parameters are known

	for( a in jdef )
	{
		switch( a )
		{
			case 'name' :
			case 'attributes' :

				break;

			default :

				throw new Error(
					'invalid jdef parameter: ' + a
				);
		}
	}

	if(
		!Jools.isString( jdef.name )
	)
	{
		throw new Error(
			'name missing'
		);
	}

	if(
		!jdef.attributes
	)
	{
		throw new Error(
			'attributes missing'
		);
	}

	aList =
		Object.keys( attr ).sort( );

	aListPlus =
		aList.slice( );

	aListPlus.push( 'inherit' );

	aListPlus.sort( );

	r.push(
		'/*',
		'| This is an autogenerated file.',
		'|',
		'| DO NOT EDIT!',
		'*/',
		'',
		'/*',
		'| Export',
		'*/',
		'',
		'var',
		'\t' + jdef.name + ';',
		'',
		'/*',
		'| Imports',
		'*/',
		'',
		'var',
		'\tJools;',
		'',
		'/*',
		'| Capsule',
		'*/',
		'(function( ) {',
		'\'use strict\';',
		'',
		'var',
		'	_tag =',
		'		\'' + Math.floor( Math.random( ) * 1000000000 ) + '\';',
		'',
		'/*',
		'| Constructor.',
		'*/',
		jdef.name + ' =',
		'\tfunction(',
		'\t\ttag,'
	);

	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		r.push(
			'\t\t' + aList[ a ]
		);
	}

	r.push(
		'\t)',
		'{',
		'',
		'/**/if( CHECK )',
		'/**/{',
		'/**/\tif( tag !== _tag )',
		'/**/\t{',
		'/**/\t\tthrow new Error(',
		'/**/\t\t\t\'tag mismatch\'',
		'/**/\t\t)',
		'/**/\t}',
		''
	);

	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		aname =
			aList[ a ];

		r.push(
			'\tthis.' + aname + ' =',
			'\t\t' + aname + ';',
			''
		);
	}

	r.push(
		'\tJools.immute( this );',
		'};',
		'',
		'',
		'/*',
		'| Creates a new ' + jdef.name + ' object.',
		'*/',
		jdef.name + '.create =',
		'\tfunction(',
		'\t\t// free strings',
		'\t)',
		'{',
		'\tvar',
		''
	);

	for(
		a = 0, aZ = aListPlus.length;
		a < aZ;
		a++
	)
	{
		aname =
			aListPlus[ a ];

		r.push(
			'\t\t' + aname + ' =',
			'\t\t\tnull' + ( a + 1 >= aListPlus.length ? ';' : ',' ),
			''
		);
	}

	r.push(
		'\tfor(',
		'\t\tvar a = 0, aZ = arguments.length;',
		'\t\ta < aZ;',
		'\t\ta += 2',
		'\t)',
		'\t{',
		'\t\tswitch( arguments[ a ] )',
		'\t\t{'
	);

	for(
		a = 0, aZ = aListPlus.length;
		a < aZ;
		a++
	)
	{
		aname =
			aListPlus[ a ];

		r.push(
			'\t\t\tcase \'' + aname + '\' :',
			'',
			'\t\t\t\t' + aname + ' =',
			'\t\t\t\t\targuments[ a + 1 ];',
			'',
			'\t\t\t\tbreak;',
			''
		);
	}

	r.push(
		'\t\t\tdefault :',
		'',
		'/**/\t\t\tif( CHECK )',
		'/**/\t\t\t{',
		'/**/\t\t\t\tthrow new Error(',
		'/**/\t\t\t\t\t\'invalid argument: \' + arguments[ a ]',
		'/**/\t\t\t\t);',
		'/**/\t\t\t}',
		'\t\t}',
		'\t}',
		'',
		'\tif( inherit )',
		'\t{'
	);

	r.push(
		'\t}',
		''
	);

	r.push(
		'};',
		''
	);

	r.push(
		'} )( );',
		''
	);

	return r.join('\n');
};


/*
| Node export
*/
module.exports =
	jgen;

} )( );
