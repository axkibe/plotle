/*
| Generates jools like objects from a jools definition.
|
| Authors: Axel Kittenberger
*/

/*
| Capsule (to make jshint happy)
*/
(function( ) {
'use strict';


var
	Jools =
		require( '../shared/jools' );


if( typeof( require ) === 'undefined' )
{
	throw new Error(
		'this code requires node!'
	);
}


/*
| Checks if a joobj definition looks ok.
*/
var
	checkJoobj =
		function(
			joobj // the jools object definition
		)
{
	var
		aName;

	for( aName in joobj )
	{
		switch( aName )
		{
			case 'name' :
			case 'attributes' :

				break;

			default :

				throw new Error(
					'invalid joobj parameter: ' + aName
				);
		}
	}

	if(
		!Jools.isString( joobj.name )
	)
	{
		throw new Error(
			'name missing'
		);
	}

	var
		attr =
			joobj.attributes;

	if( !attr )
	{
		throw new Error(
			'attributes missing'
		);
	}

	for( aName in attr )
	{
		if( aName === 'inherit' )
		{
			throw new Error(
				'attribute must not be named "inherit"'
			);
		}

		for( var aoname in attr[ aName ] )
		{
			switch( aoname )
			{
				case 'comment' :
				case 'type' :

					break;

				default :

					throw new Error(
						'attribute ' +
							'"' + aName + '"' +
							' has invalid specifier: ' +
							'"' + aoname + '"'
					);
			}
		}

		if( !Jools.isString( attr[ aName ].type ) )
		{
			throw new Error(
				'type is missing from "' + aName + '"'
			);
		}
	}
};


/*
| Returns a white spaced string with the 'len' length.
*/
var
whiteSpace =
	function(
		len
	)
{
	var
		w =
			'';

	for(
		var a = 0;
		a < len;
		a++
	)
	{
		w += ' ';
	}

	return w;
};


/*
| Generates code from a jools object definition
*/
var
joobjGenerator =
	function(
		joobj // the jools object definition
	)
{
	var
		a,
		aZ,

		aName,

		// shortcut
		attr =
			joobj.attributes,

		// alphabetical sorted attribute names
		aList =
			null,

		// alphabetical sorted attribute names
		// including 'inherit'
		aListPlus =
			null,

		// longest attribute name
		maxANameLen =
			0,

		r =
			[ ];

	// tests if the joobj looks ok
	checkJoobj( joobj );

	aList =
		Object.keys( attr ).sort( );

	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		aName =
			aList[ a ];

		if( aName.length > maxANameLen )
		{
			maxANameLen =
				aName.length;
		}
	}

	aListPlus =
		aList.slice( );

	aListPlus.push( 'inherit' );

	aListPlus.sort( );

	r.push(
		'/*',
		'| This is an autogenerated file.',
		'|',
		'| DO NOT EDIT!',
		'*/',
		'',
		'/*',
		'| Export',
		'*/',
		'',
		'var',
		'\t' + joobj.name + ';',
		'',
		'/*',
		'| Imports',
		'*/',
		'',
		'var',
		'\tJools;',
		'',
		'/*',
		'| Capsule',
		'*/',
		'(function( ) {',
		'\'use strict\';',
		'',
		'',
		'var',
		'\t_tag =',
		'\t\t' + Math.floor( Math.random( ) * 1000000000 ) + ';',
		'',
		'',
		'/*',
		'| Constructor.',
		'*/',
		joobj.name + ' =',
		'\tfunction(',
		'\t\ttag,'
	);

	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		aName =
			aList[ a ];

		var
			comment =
				attr[ aName ].comment,


			comma =
				a + 1 < aZ;

		r.push(
			'\t\t' + aName +
				( comma ? ',' : '' ) +
				( comment ?
					whiteSpace(
						maxANameLen - aName.length + (comma ? 0 : 1 )
					) + ' // ' + comment
					:
					''
				)
		);
	}

	r.push(
		'\t)',
		'{',
		'',
		'/**/if( CHECK )',
		'/**/{',
		'/**/\tif( tag !== _tag )',
		'/**/\t{',
		'/**/\t\tthrow new Error(',
		'/**/\t\t\t\'tag mismatch\'',
		'/**/\t\t);',
		'/**/\t}',
		'/**/}',
		''
	);

	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		aName =
			aList[ a ];

		r.push(
			'\tthis.' + aName + ' =',
			'\t\t' + aName + ';',
			''
		);
	}

	r.push(
		'\tJools.immute( this );',
		'};',
		'',
		'',
		'/*',
		'| Creates a new ' + joobj.name + ' object.',
		'*/',
		joobj.name + '.create =',
		'\tfunction(',
		'\t\t// free strings',
		'\t)',
		'{',
		'\tvar',
		''
	);

	for(
		a = 0, aZ = aListPlus.length;
		a < aZ;
		a++
	)
	{
		aName =
			aListPlus[ a ];

		r.push(
			'\t\t' + aName + ' =',
			'\t\t\tnull' + ( a + 1 >= aListPlus.length ? ';' : ',' ),
			''
		);
	}

	r.push(
		'\tfor(',
		'\t\tvar a = 0, aZ = arguments.length;',
		'\t\ta < aZ;',
		'\t\ta += 2',
		'\t)',
		'\t{',
		'\t\tswitch( arguments[ a ] )',
		'\t\t{'
	);

	for(
		a = 0, aZ = aListPlus.length;
		a < aZ;
		a++
	)
	{
		aName =
			aListPlus[ a ];

		r.push(
			'\t\t\tcase \'' + aName + '\' :',
			'',
			'\t\t\t\t' + aName + ' =',
			'\t\t\t\t\targuments[ a + 1 ];',
			'',
			'\t\t\t\tbreak;',
			''
		);
	}

	r.push(
		'\t\t\tdefault :',
		'',
		'/**/\t\t\tif( CHECK )',
		'/**/\t\t\t{',
		'/**/\t\t\t\tthrow new Error(',
		'/**/\t\t\t\t\t\'invalid argument: \' + arguments[ a ]',
		'/**/\t\t\t\t);',
		'/**/\t\t\t}',
		'\t\t}',
		'\t}',
		''
	);

	r.push(
		'\tif( inherit )',
		'\t{'
	);

	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		aName =
			aList[ a ];

		r.push(
			'\t\tif( ' + aName + ' === null )',
			'\t\t{',
			'\t\t\t' + aName + ' =',
			'\t\t\t\tinherit.' + aName + ';',
			'\t\t}',
			''
		);
	}

	r.push(
		'\t\tif('
	);


	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		aName =
			aList[ a ];

		if( a > 0 )
		{
			r.push(
				'\t\t\t&&'
			);
		}

		switch( attr[ aName ].type )
		{
			case 'String' :

				r.push(
					'\t\t\t' + aName + ' === inherit.' + aName
				);

				break;

			default :

				r.push(
					'\t\t\t' + aName +
						'.equals( inherit.' + aName + ' )'
				);

				break;
		}
	}

	r.push(
		'\t\t)',
		'\t\t{',
		'\t\t\treturn inherit;',
		'\t\t}',
		'\t}',
		''
	);

	r.push(
		'\treturn (',
		'\t\tnew ' + joobj.name + '(',
		'\t\t\t_tag,'
	);

	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		aName =
			aList[ a ];

		r.push(
			'\t\t\t' + aName +
				( a + 1 < aList.length ? ',' : '' )
		);
	}

	r.push(
		'\t\t)',
		'\t);',
		'};',
		'',
		''
	);

	r.push(
		'/*',
		'| Reflection',
		'*/',
		joobj.name + '.prototype.reflect =',
		'\t\'' + joobj.name + '\';',
		'',
		''
	);

	r.push(
		'/*',
		'| Checks for equal objects.',
		'*/',
		joobj.name + '.prototype.equals =',
		'\tfunction(',
		'\t\tobj',
		'\t)',
		'{',
		'\treturn ('
	);

	for(
		a = 0, aZ = aList.length;
		a < aZ;
		a++
	)
	{
		aName =
			aList[ a ];

		if( a > 0 )
		{
			r.push(
				'\t\t&&'
			);
		}

		switch( attr[ aName ].type )
		{
			case 'String' :

				r.push(
					'\t\tthis.' + aName + ' === obj.' + aName
				);

				break;

			default :

				r.push(
					'\t\tthis.' + aName +
						'.equals( obj.' + aName + ' )'
				);

				break;
		}
	}

	r.push(
		'\t);',
		'};',
		'',
		''
	);

	r.push(
		'} )( );',
		''
	);

	return r.join( '\n' );
};


/*
| Node export
*/
module.exports =
	joobjGenerator;


} )( );
