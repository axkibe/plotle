// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'undefined' ? null : require;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, i, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"meshcraft": {
		"config.js": function (exports, module, require) {
			/*
			| Config
			*/


			/*
			| Config infrastructure.
			|
			| Don't change this.
			*/
			var config =
			module.exports =
				{
					database :
						{ },

					debug :
						{ }
				};


			/*
			| an additional admin user
			*/
			config.admin =
				'axel';


			/*
			| The interface to listen on,.
			|   null       means listens on all interfaces.
			|  '127.0.0.1' means localhost (IPV4)
			*/
			config.ip =
				//'127.0.0.1';
				//'192.168.88.1';
				null;


			/*
			| The port to listen on.
			*/
			config.port =
				8833;


			/*
			| Host the mongodb database runs on
			*/
			config.database.host =
				'127.0.0.1';


			/*
			| Port the mongodb database runs on
			*/
			config.database.port =
				27017;


			/*
			| Name of the mongodb database
			*/
			config.database.name =
				'meshcraft04';


			/*
			| Determines the amound of checking and complaining if things go wrong.
			*/
			config.develShell =
				true;

			/*
			| If the server is in devel mode,
			| it will die on a command it considers unacceptable.
			*/
			config.develServer =
				false;


			/*
			| Does not write stuff on server startup
			*/
			config.noWrite =
				false;

			/*
			| If true "uglifies" the javascript pack, minimizing its size.
			*/
			config.uglify =
				false;


			/*
			| If true does extra mangles on output compression
			*/
			config.extraMangle =
				true;


			/*
			| If true "beautifies" uglify output.
			*/
			config.beautify =
				false;


			/*
			| Max. number of undo events queued.
			*/
			config.maxUndo =
				5000;


			/*
			| If true formats messages and JSON with whitespace/newlines
			*/
			config.debug.puffed =
				true;


			/*
			| If true ensures that objects that should not be immutable
			| are made immutable. Turned off on releases for performance.
			*/
			config.debug.immute =
				false;


			/*
			| Activates all hacks needed to debug the client with weinre.
			| Set to false/null or the address of the weinre server
			*/
			config.debug.weinre =
				false &&
				'192.168.77.1:8080';

			/*
			| enable specific logging categories
			*/
			config.log  = {
				all :
					false
					&&
					true,
				ajax :
					false,
				change :
					false,
				news :
			//		true ||
					false,
				debug :
					true,
				fail :
					true,
				twig :
					false,
				iface :
					false,
				peer :
					false,
				report :
					false,
				start :
					true,
				shell :
					true,
				tfx :
					false,
				tree :
					false,
				web :
					true,
				warn :
					true
			};

		},
		"src": {
			"joobj": {
				"generator.js": function (exports, module, require) {
					/*
					| Generates jools like objects from a jools definition.
					|
					| Authors: Axel Kittenberger
					*/

					/*
					| Capsule (to make jshint happy)
					*/
					(function( ) {
					'use strict';


					var
						Jools =
							require( '../jools/jools' );


					/*
					| Attributes must not be named like these.
					*/
					var
						attributeBlacklist =
							Object.freeze( {
								'atRank' :
									true,
								'create' :
									true,
								'getPath' :
									true,
								'inherit' :
									true,
								'ranks' :
									true,
								'setPath' :
									true,
								'type' :
									true,
								'twig' :
									true
							} );

					/*
					| Checks if a joobj definition looks ok.
					*/
					var
						checkJoobj =
							function(
								joobj // the jools object definition
							)
					{
						var
							aName;

						if( !joobj )
						{
							throw new Error( );
						}

						for( aName in joobj )
						{
							switch( aName )
							{
								// FIXME make a whiteListObject
								case 'attributes' :
								case 'init' :
								case 'json' :
								case 'name' :
								case 'node' :
								case 'equals' :
								case 'subclass' :
								case 'singleton' :
								case 'twig' :
								case 'unit' :

									break;

								default :

									throw new Error(
										'invalid joobj parameter: ' + aName
									);
							}
						}

						if( !Jools.isString( joobj.name ) )
						{
							throw new Error(
								'name missing'
							);
						}

						var
							attr =
								joobj.attributes;

						if( joobj.singleton && attr )
						{
							throw new Error(
								'singletons must not have attributes'
							);
						}

						if( attr )
						{

							for( aName in attr )
							{
								if( attributeBlacklist[ aName ] )
								{
									throw new Error(
										'attribute must not be named "' + aName + '"'
									);
								}

								for( var aoName in attr[ aName ] )
								{
									switch( aoName )
									{
										case 'defaultValue' :

											if ( !Jools.isString( attr[ aName ][ aoName ] ) )
											{
												throw new Error(
													'defaultValue must be a string literal'
												);
											}

											break;

										case 'allowsNull' :

											if( attr[ aName ].defaultValue === 'null' )
											{
												throw new Error(
													joobj.unit + '.' + joobj.name + ': ' +
													'defaultValue \"null\" implies allowsNull'
												);
											}

											break;

										case 'allowsUndefined' :

											if( attr[ aName ].defaultValue === 'undefined' )
											{
												throw new Error(
													joobj.unit + '.' + joobj.name + ': ' +
													'defaultValue \"undefined\" implies allowsUndefined'
												);
											}

											break;

										case 'json' :

											if( attr[ aName].assign === null )
											{
												throw new Error(
													'json attributes most not has null assignment'
												);
											}

											break;

										case 'assign' :
										case 'comment' :
										case 'type' :
										case 'unit' :

											break;

										case 'concerns' :

											for( var aooName in attr[ aName ][ aoName ] )
											{
												switch( aooName )
												{
													case 'func' :
													case 'member' :
													case 'args' :

														break;

													default :

														throw new Error(
															'invalid spec: "' +
																aoName +
																'"'
														);
												}
											}

											break;

										default :

											throw new Error(
												'attribute ' +
													'"' + aName + '"' +
													' has invalid specifier: ' +
													'"' + aoName + '"'
											);
									}
								}

								if( !Jools.isString( attr[ aName ].type ) )
								{
									throw new Error(
										'type is missing from "' + aName + '"'
									);
								}
							}
						}
					};


					/*
					| Creates the data structures to work with.
					*/
					var
					buildJJ =
						function(
							joobj
						)
					{
						var
							aName,
							attr,
							// alphabetical sorted attribute names
							attrList =
								[ ],
							attributes =
								{ },
							// list of all arguments passed to
							// constructor
							conVars =
								{ },
							hasJSON =
								!!joobj.json,
							jsonList =
								[ ],
							// units sorted alphabetically
							unitList =
								null,
							// units used
							units =
								{ };

						// list of attributes
						if( joobj.attributes )
						{
							for( aName in joobj.attributes )
							{
								attr =
									joobj.attributes[ aName ];

								attributes[ aName ] =
									Object.freeze(
										{
											aName :
												aName,
											allowsNull :
												attr.allowsNull
												||
												attr.defaultValue === 'null',
											allowsUndefined :
												attr.allowsUndefined
												||
												attr.defaultValue === 'undefined',
											assign :
												attr.assign !== undefined
													?
													attr.assign
													:
													aName,
											comment :
												attr.comment,
											concerns :
												attr.concerns,
											defaultValue :
												attr.defaultValue,
											json :
												attr.json,
											type :
												attr.type,
											unit :
												attr.unit,
											vName :
												'v_' + aName
										}
									);

								if( attr.unit )
								{
									units[ attr.unit ] =
										true;
								}

								if( attr.json )
								{
									hasJSON =
										true;

									jsonList.push( aName );
								}

								// skips unused attributes
								if(
									attr.assign !== null
									||
									(
										joobj.init
										&&
										joobj.init.indexOf( aName ) >= 0
									)
								)
								{
									conVars[ aName ] =
										Object.freeze(
											{
												aName :
													aName,
												comment :
													attr.comment,
												vName :
													attributes[ aName ].vName
											}
										);
								}
							}

							attrList =
								Object
									.keys( joobj.attributes )
									.sort( );
						}

						unitList =
							Object.keys( units ).sort( );

						if(
							joobj.init
							&&
							joobj.init.indexOf( 'inherit' ) >= 0
						)
						{
							conVars.inherit =
								Object.freeze(
									{
										aName :
											'inherit',
										comment :
											'inheritance',
										vName :
											'inherit'
									}
								);
						}

						if( joobj.twig )
						{
							conVars.twig =
								Object.freeze(
									{
										aName :
											'twig',
										comment :
											'twig, set upon change',
										vName :
											'twig'
									}
								);

							conVars.ranks =
								Object.freeze(
									{
										aName :
											'ranks',
										comment :
											'twig order, set upon change',
										vName :
											'ranks'
									}
								);

							if( hasJSON )
							{
								jsonList.push( 'twig' );
								jsonList.push( 'ranks' );
							}
						}

						var
							conList =
								Object.keys( conVars );

						conList.sort(
							function( o, p )
							{
								return (
									Jools.compare(
										conVars[ o ].vName,
										conVars[ p ].vName
									)
								);
							}
						);

						jsonList.sort( );

						return Object.freeze(
							{
								attrList :
									attrList,
								attributes :
									attributes,
								conList :
									conList,
								conVars :
									conVars,
								equals :
									joobj.equals,
								init :
									joobj.init,
								hasJSON :
									hasJSON,
								jsonList :
									jsonList,
								name :
									joobj.name,
								node :
									joobj.node,
								// in case unit and joobj are named identically
								// the shortcut will be renamed
								reference :
									( joobj.unit === joobj.name )
									?
									joobj.name + 'Obj'
									:
									joobj.name,
								singleton :
									joobj.singleton,
								subclass :
									joobj.subclass,
								twig :
									joobj.twig,
								unit :
									joobj.unit,
								unitList :
									unitList
							}
						);
					};


					/*
					| Returns a white spaced string with the 'len' length.
					*/
					var
					whiteSpace =
						function(
							len
						)
					{
						var
							w =
								'';

						for(
							var a = 0;
							a < len;
							a++
						)
						{
							w += ' ';
						}

						return w;
					};


					/*
					| Generates the file header.
					*/
					var
					generateFileHeader =
						function(
							r // result array
						)
					{
						r.push(
							'/*',
							'| This is an autogenerated file.',
							'|',
							'| DO NOT EDIT!',
							'*/'
						);
					};


					/*
					| Generates a section seperator.
					*/
					var
					generateSeperator =
						function(
							r // result array
						)
					{
						r.push(
							'',
							''
						);
					};


					/*
					| Generates the export section.
					*/
					var
					generateExportSection =
						function(
							r,   // result array
							jj   // the jj working object
						)
					{
						var
							unit =
								jj.unit;

						r.push(
							'/*',
							'| Export',
							'*/',
							'var'
						);

						if( unit )
						{
							r.push(
								'\t' + unit + ' =',
								'\t\t' + unit + ' || { };'
							);
						}
						else
						{
							r.push(
								'\t' + jj.name + ';'
							);
						}
					};


					/*
					| Generates the imports section.
					*/
					var
					generateImportsSection =
						function(
							r,  // result array
							jj  // joobj working object
						)
					{
						r.push(
							'/*',
							'| Imports',
							'*/',
							'var',
							'\tJoobjProto,',
							'\tJools' +
								( jj.unitList && jj.unitList.length > 0 ? ',' : ';' )
						);

						if( jj.unitList )
						{
							for(
								var a = 0, aZ = jj.unitList.length;
								a < aZ;
								a++
							)
							{
								r.push(
									'\t' + jj.unitList[ a ] +
										( a + 1 < aZ ? ',' : ';' )
								);
							}
						}
					};


					/*
					| Generates the capsule header.
					*/
					var
					generateCapsuleHeader =
						function(
							r      // result array
							// jj  // the joobj working object
						)
					{
						r.push(
							'/*',
							'| Capsule',
							'*/',
							'(function( ) {',
							'\'use strict\';'
						);

						r.push(
							'',
							'',
							'var',
							'\t_tag =',
							'\t\t' + Math.floor( Math.random( ) * 1000000000 ) + ';'
						);
					};


					/*
					| Generates the capsule footer.
					*/
					var
					generateCapsuleFooter =
						function(
							r // result array
						)
					{
						r.push(
							'} )( );',
							''
						);
					};


					/*
					| Generates the node include section.
					*/
					var
					generateNodeIncludesSection =
						function(
							r,   // result array
							jj   // the joobj working object
						)
					{
						var
							a,
							aZ,
							aName,
							attr,
							ref;

						r.push(
							'/*',
							'| Node includes',
							'*/',
							'if( SERVER )',
							'{',
							'\tJoobjProto =',
							'\t\trequire( \'../src/joobj/proto\' );',
							'',
							'\tJools =',
							'\t\trequire( \'../src/jools/jools\' );'
						);

						for(
							a = 0, aZ = jj.unitList.length;
							a < aZ;
							a++
						)
						{
							r.push(
								'',
								'\t' + jj.unitList[ a ] + ' =',
								'\t\t{ };'
							);
						}

						var
							// a list of stuff already generated
							generated =
								{ };

						for(
							a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							aName =
								jj.attrList[ a ];

							attr =
								jj.attributes[ aName ];

							switch( attr.type )
							{
								case 'Boolean' :
								case 'Integer' :
								case 'Number' :
								case 'String' :

									break;

								default :

									ref =
										attr.unit + '.' + attr.type;

									if( generated[ ref ] )
									{
										continue;
									}

									generated[ ref ] =
										true;

									if( attr.unit )
									{
										r.push(
											'',
											'\t' + ref + ' =',
											'\t\trequire( \'../src/' +
												attr.unit.toLowerCase( ) + '/' +
												attr.type.toLowerCase( ) +
												'\' );'
										);
									}
									else
									{
										// FIXME
									}
							}
						}

						r.push(
							'}'
						);
					};


					/*
					| Generates the node export section.
					*/
					var
					generateNodeExportSection =
						function(
							r,  // result array
							jj  // the joobj working object
						)
					{
						r.push(
							'/*',
							'| Node export',
							'*/',
							'if( SERVER )',
							'{',
							'\tmodule.exports =',
							'\t\t' + jj.reference + ';',
							'}'
						);
					};



					/*
					| Generates the constructor.
					*/
					var
					generateConstructor =
						function(
							r,  // result array
							jj  // the joobj working object
						)
					{
						var
							a,
							aZ,

							// attribute name
							aName,

							// the attribute
							attr,

							con,
							comma,

							// longest attribute name in
							// the constructor list
							maxVNameLen =
								0,

							vName;

						if( jj.attrList )
						{
							for(
								a = 0, aZ = jj.conList.length;
								a < aZ;
								a++
							)
							{
								con =
									jj.conVars[ jj.conList[ a ] ];

								vName =
									con.vName;

								if( vName.length > maxVNameLen )
								{
									maxVNameLen =
										vName.length;
								}
							}
						}

						r.push(
							'/*',
							'| Constructor.',
							'*/'
						);

						if( jj.unit )
						{
							r.push(
								'var ' + jj.reference + ' =',
								jj.unit + '.' + jj.name + ' ='
							);
						}
						else
						{
							r.push(
								jj.reference + ' ='
							);
						}

						r.push(
							'\tfunction(',
							'\t\ttag' +
								( jj.conList.length > 0 ?  ',' : '' )
						);

						for(
							a = 0, aZ = jj.conList.length;
							a < aZ;
							a++
						)
						{
							con =
								jj.conVars[ jj.conList[ a ] ];

							comma =
								a + 1 < aZ;

							r.push(
								'\t\t' + con.vName +
									( comma ? ',' : '' ) +
									( con.comment ?
										whiteSpace(
											maxVNameLen -
												con.vName.length +
												(comma ? 0 : 1 )
										) + ' // ' + con.comment
										:
										''
									)
							);
						}

						r.push(
							'\t)',
							'{'
						);

						r.push(
							'',
							'/**/if( CHECK )',
							'/**/{',
							'/**/\tif( tag !== _tag )',
							'/**/\t{',
							'/**/\t\tthrow new Error(',
							'/**/\t\t\t\'tag mismatch\'',
							'/**/\t\t);',
							'/**/\t}',
							'/**/}'
						);

						// creates assigns for all assignable attributes
						for(
							a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							aName =
								jj.attrList[ a ];

							attr =
								jj.attributes[ aName ];

							if( attr.assign === null )
							{
								continue;
							}

							if( !attr.allowsUndefined )
							{
								r.push(
									'',
									'\tthis.' + attr.assign + ' =',
									'\t\t' + attr.vName + ';'
								);
							}
							else
							{
								r.push(
									'',
									'\tif( ' + attr.vName + ' !== undefined )',
									'\t{',
									'\t\tthis.' + attr.assign + ' =',
									'\t\t\t' + attr.vName + ';',
									'\t}'
								);
							}
						}

						if( jj.twig )
						{
							r.push(
								'',
								'\tthis.twig =',
								'\t\ttwig;',
								'',
								'\tthis.ranks =',
								'\t\tranks;'
							);
						}

						if( jj.init )
						{
							if( jj.init.length === 0 )
							{
								r.push(
									'',
									'\tthis._init( );'
								);
							}
							else
							{
								r.push(
									'',
									'\tthis._init('
								);

								for(
									a = 0, aZ = jj.init.length;
									a < aZ;
									a++
								)
								{
									attr =
										jj.conVars[ jj.init[ a ] ];

									if( !attr )
									{
										throw new Error(
											'unknown constructor variable: ' +
												jj.init[ a ]
										);
									}

									r.push(
										'\t\t' + attr.vName +
											( a + 1 < aZ ? ',' : '' )
									);
								}

								r.push(
									'\t);'
								);
							}
						}

						r.push(
							'',
							'\tJools.immute( this );'
						);

						if( jj.twig )
						{
							r.push(
								'Jools.immute( ranks );',
								'Jools.immute( twig );'
							);
						}

						r.push(
							'};'
						);
					};


					/*
					| Generates the singleton section.
					*/
					var
					generateSingletonSection =
						function(
							r // result array
						)
					{
						r.push(
							'/*',
							'| Singleton',
							'*/',
							'var',
							'\t_singleton =',
							'\t\tnull;'
						);
					};


					/*
					| Generates the subclass.
					*/
					var
					generateSubclassSection =
						function(
							r,  // result array
							jj  // the joobj working object
						)
					{
						r.push(
							'Jools.subclass(',
							'\t' + jj.reference + ',',
							'\t' + jj.subclass,
							');'
						);
					};



					/*
					| Generates the inheritance receiver
					| of the creator.
					*/
					var
					generateCreatorInheritanceReceiver =
						function
						(
							r,  // result array
							jj  // the joobj working object
						)
					{
						var
							a,
							aZ,
							aName,
							attr;

						r.push(
							'\tif( this !== ' + jj.reference + ' )',
							'\t{',
							'\t\tinherit =',
							'\t\t\tthis;',
							''
						);

						if( jj.twig )
						{
							r.push(
								'\t\ttwig =',
								'\t\t\tinherit.twig;',
								'',
								'\t\tranks =',
								'\t\t\tinherit.ranks;',
								'',
								'\t\ttwigdup =',
								'\t\t\tfalse;',
								''
							);
						}

						for(
							a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							aName =
								jj.attrList[ a ];

							attr =
								jj.attributes[ aName ];

							if( attr.assign === null )
							{
								continue;
							}

							if( a > 0 )
							{
								r.push(
									''
								);
							}

							r.push(
								'\t\t' + attr.vName + ' =',
								'\t\t\tthis.' +
									attr.assign +
									';'
							);
						}

						r.push(
							'\t}'
						);

						if( jj.twig )
						{
							r.push(
								'\telse',
								'\t{',
								'\t\ttwig =',
								'\t\t\t{ };',
								'',
								'\t\tranks =',
								'\t\t\t[ ];',
								'',
								'\t\ttwigdup =',
								'\t\t\ttrue;',
								'\t}'
							);
						}
					};


					/*
					| Generates the free strings parser
					| of the creator.
					*/
					var
					generateCreatorFreeStringsParser =
						function(
							r,  // result array
							jj  // the joobj working object
						)
					{
						var
							a,
							aZ,
							attr;

						r.push(
							'',
							'\tfor(',
							'\t\tvar a = 0, aZ = arguments.length;',
							'\t\ta < aZ;',
							'\t\ta += 2',
							'\t)',
							'\t{',
							'\t\tvar',
							'\t\t\targ =',
							'\t\t\t\targuments[ a + 1 ];',
							'',
							'\t\tswitch( arguments[ a ] )',
							'\t\t{'
						);

						for(
							a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							attr =
								jj.attributes[ jj.attrList[ a ] ];

							r.push(
								'\t\t\tcase \'' + attr.aName + '\' :',
								'',
								'\t\t\t\tif( arg !== undefined )',
								'\t\t\t\t{',
								'\t\t\t\t\t' + attr.vName + ' =',
								'\t\t\t\t\t\targ;',
								'\t\t\t\t}',
								'',
								'\t\t\t\tbreak;',
								''
							);
						}

						if( jj.twig )
						{
							r.push(
								'\t\t\tcase \'twig:add\' :',
								'',
								'\t\t\t\tif( !twigdup )',
								'\t\t\t\t{',
								'\t\t\t\t\ttwig =',
								'\t\t\t\t\t\tJools.copy( twig );',
								'',
								'\t\t\t\t\tranks =',
								'\t\t\t\t\t\tranks.slice( );',
								'',
								'\t\t\t\t\ttwigdup =',
								'\t\t\t\t\t\ttrue;',
								'\t\t\t\t}',
								'',
								'\t\t\t\tkey =',
								'\t\t\t\t\targ;',
								'',
								'\t\t\t\targ =',
								'\t\t\t\t\targuments[ ++a + 1 ];',
								'',
								'\t\t\t\tif( twig[ key ] !== undefined )',
								'\t\t\t\t{',
								'\t\t\t\t\tthrow new Error(',
								'\t\t\t\t\t\t\'key "\' + key + \'" already in use\'',
								'\t\t\t\t\t);',
								'\t\t\t\t}',
								'',
								// TODO check if arg is of correct type
								'\t\t\t\ttwig[ key ] =',
								'\t\t\t\t\targ;',
								'',
								'\t\t\t\tranks.push( key );',
								'',
								'\t\t\t\tbreak;',
								'',
								'\t\t\tcase \'twig:set\' :',
								'',
								'\t\t\t\tif( !twigdup )',
								'\t\t\t\t{',
								'\t\t\t\t\ttwig =',
								'\t\t\t\t\t\tJools.copy( twig );',
								'',
								'\t\t\t\t\tranks =',
								'\t\t\t\t\t\tranks.slice( );',
								'',
								'\t\t\t\t\ttwigdup =',
								'\t\t\t\t\t\ttrue;',
								'\t\t\t\t}',
								'',
								'\t\t\t\tkey =',
								'\t\t\t\t\targ;',
								'',
								'\t\t\t\targ =',
								'\t\t\t\t\targuments[ ++a + 1 ];',
								'',
								'\t\t\t\tif( twig[ key ] === undefined )',
								'\t\t\t\t{',
								'\t\t\t\t\tthrow new Error(',
								'\t\t\t\t\t\t\'key "\' + key + \'" not in use\'',
								'\t\t\t\t\t);',
								'\t\t\t\t}',
								'',
								// TODO check if arg is of correct type
								'\t\t\t\ttwig[ key ] =',
								'\t\t\t\t\targ;',
								'',
								'\t\t\t\tbreak;',
								''
							);
						}

						r.push(
							'\t\t\tdefault :',
							'',
							'/**/\t\t\tif( CHECK )',
							'/**/\t\t\t{',
							'/**/\t\t\t\tthrow new Error(',
							'/**/\t\t\t\t\t\'invalid argument: \' + arguments[ a ]',
							'/**/\t\t\t\t);',
							'/**/\t\t\t}',
							'\t\t}',
							'\t}'
						);
					};


					/*
					| Generates the creators default values filler.
					*/
					var
					generateDefaultValues =
						function
						(
							r,   // result array
							jj,  // the joobj working object
							json // if true only generate json vars
						)
					{
						var
							attr;

						for(
							var a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							attr =
								jj.attributes[ jj.attrList[ a ] ];

							if( json && !attr.json )
							{
								continue;
							}

							if( attr.defaultValue )
							{
								r.push(
									'',
									'\tif( ' + attr.vName + ' === undefined )',
									'\t{',
									'\t\t' + attr.vName + ' =',
									'\t\t\t' + attr.defaultValue + ';',
									'\t}'
								);
							}
						}
					};


					/*
					| Generates the creators checks.
					*/
					var
					generateChecks =
						function
						(
							r,   // result array
							jj,  // the joobj working object
							json // if true only generator json checks
						)
					{
						var
							a,
							aZ,
							attr;

						if( jj.attrList.length === 0 )
						{
							return;
						}

						r.push(
							'',
							'/**/if( CHECK )',
							'/**/{'
						);

						for(
							a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							attr =
								jj.attributes[ jj.attrList[ a ] ];

							if( json && !attr.json )
							{
								continue;
							}

							if( !attr.allowsUndefined )
							{
								r.push(
									'/**/',
									'/**/\tif( ' + attr.vName + ' === undefined )',
									'/**/\t{',
									'/**/\t\tthrow new Error(',
									'/**/\t\t\t\'undefined attribute ' + attr.aName + '\'',
									'/**/\t\t);',
									'/**/\t}'
								);
							}

							if( !attr.allowsNull )
							{
								r.push(
									'/**/',
									'/**/\tif( ' + attr.vName + ' === null )',
									'/**/\t{',
									'/**/\t\tthrow new Error(',
									'/**/\t\t\t\'' + attr.aName + ' must not be null\'',
									'/**/\t\t);',
									'/**/\t}'
								);
							}

							var
								skip =
									false;

							switch( attr.type )
							{
								case 'Action' :
								case 'Array' :
								case 'Function' :
								case 'Item' :
								case 'Mark' :
								case 'Object' :
								case 'Tree' :

									skip =
										true;
							}

							if( !skip )
							{
								var
									indent =
										'/**/\t',

									defCheck =
										false;

								if( attr.allowsNull && !attr.allowsUndefined )
								{
									r.push(
										'/**/',
										'/**/\tif( ' + attr.vName + ' !== null )',
										'/**/\t{'
									);

									indent += '\t';

									defCheck =
										true;
								}
								else if( !attr.allowsNull && attr.allowsUndefined )
								{
									r.push(
										'/**/',
										'/**/\tif( ' + attr.vName + ' !== undefined )',
										'/**/\t{'
									);

									indent += '\t';

									defCheck =
										true;
								}
								else if( attr.allowsNull && attr.allowsUndefined )
								{
									r.push(
										'/**/',
										'/**/\tif(',
										'/**/\t\t' + attr.vName + ' !== null',
										'/**/\t\t&&',
										'/**/\t\t' + attr.vName + ' !== undefined',
										'/**/\t)',
										'/**/\t{'
									);

									indent += '\t';

									defCheck =
										true;
								}

								switch( attr.type )
								{
									case 'Boolean' :

										r.push(
											indent + 'if(',
											indent +
												'\ttypeof( ' + attr.vName  + ' )' +
												' !== \'boolean\'',
											indent + ')'
										);

										break;

									case 'Integer' :

										r.push(
											indent +
												'if(',
											indent +
												'\ttypeof( ' + attr.vName  + ' )' +
												' !== \'number\'',
											indent +
												'\t||',
											indent +
												'\tMath.floor( ' + attr.vName + ' )' +
												' !== ' + attr.vName,
											indent +
												')'
										);

										break;

									case 'String' :

										r.push(
											indent + 'if(',
											indent + '\ttypeof( ' + attr.vName  + ' )' +
												' !== \'string\'',
											indent + '\t&&',
											indent + '\t!( ' + attr.vName + ' instanceof String )',
											indent + ')'
									);

										break;

									case 'Number' :

										r.push(
											indent + 'if(',
											indent + '\ttypeof( ' + attr.vName  + ' )' +
												' !== \'number\'',
											indent + ')'
										);

										break;

									default :

										r.push(
											indent + 'if( ' +
												attr.vName + '.reflect !==' +
												' \'' + attr.type + '\'' + ' )'
										);
								}

								r.push(
									indent + '{',
									indent + '\tthrow new Error(',
									indent + '\t\t\'type mismatch\'',
									indent + '\t);',
									indent + '}'
								);

								if( defCheck )
								{
									r.push(
										'/**/\t}'
									);
								}
							}
						}

						r.push(
							'/**/}'
						);
					};


					/*
					| Generates the creators concers section
					*/
					var
					generateCreatorConcerns =
						function
						(
							r,  // result array
							jj  // the joobj working object
						)
					{
						for(
							var a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							var
								attr =
									jj.attributes[ jj.attrList[ a ] ];

							if( !attr.concerns )
							{
								continue;
							}

							var
								args =
									attr.concerns.args,

								b,
								bZ,

								func =
									attr.concerns.func,

								member =
									attr.concerns.member;

							r.push(
								'\t' + attr.vName + ' ='
							);

							if( func )
							{
								if( args.length === 0 )
								{
									r.push(
										'\t\t' + func + '( );',
										''
									);
								}
								else
								{
									r.push(
										'\t\t' + func + '('
									);

								}
							}
							else
							{
								// member
								if( !args )
								{
									if( attr.allowsNull && attr.allowsUndefiend )
									{
										throw new Error( 'FIXME' );
									}
									else if( attr.allowsNull )
									{
										r.push(
											'\t\t' + attr.vName + ' !== null ?',
											'\t\t\t' + attr.vName + '.' + member + ':',
											'\t\t\tnull;'
										);
									}
									else if( attr.allowsUndefined )
									{
										r.push(
											'\t\t' + attr.vName + ' !== undefined ?',
											'\t\t\t' + attr.vName + '.' + member + ':',
											'\t\t\tnull;'
										);
									}
									else
									{
										r.push(
											'\t\t' + attr.vName + '.' + member + ';'
										);
									}
								}
								else
								{
									r.push(
										'\t\t' + attr.vName + '.' + member + '('
									);

								}
							}

							if( args && args.length > 0 )
							{
								for(
									b = 0, bZ = args.length;
									b < bZ;
									b++
								)
								{
									attr =
										jj.attributes[ args[ b ] ];

									if( !attr )
									{
										throw new Error(
											'unknown attribute: ' + args[ b ]
										);
									}

									r.push(
										'\t\t\t' + attr.vName +
											( b + 1 < bZ ? ',' : '' )
									);
								}

								r.push(
									'\t\t);',
									''
								);
							}
						}
					};

					/*
					| Generates the creators full inheritance shortcut.
					*/
					var
					generateCreatorFullInheritance =
						function
						(
							r,  // result array
							jj  // the joobj working object
						)
					{
						var
							attr;

						if( jj.attrList.length === 0 )
						{
							r.push(
								'',
								'/**/if( CHECK )',
								'/**/{',
								'/**/\tif( arguments.length > 0 )',
								'/**/\t{',
								'/**/\t\tthrow new Error(',
								'/**/\t\t\t\'invalid argument\'',
								'/**/\t\t);',
								'/**/\t}',
								'/**/}'
							);

							return;
						}

						r.push(
							'',
							'\tif(',
							'\t\tinherit',
							'\t\t&&'
						);

						if( jj.twig )
						{
							r.push(
								'\t\t!twigdup',
								'\t\t&&'
							);
						}

						for(
							var a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							attr =
								jj.attributes[ jj.attrList[ a ] ];

							if( a > 0 )
							{
								r.push(
									'\t\t&&'
								);
							}

							if( attr.assign === null )
							{
								r.push(
									'\t\t' + attr.vName + ' === null'
								);

								continue;
							}

							switch( attr.type )
							{
								case 'Array' : // FIXME
								case 'Boolean' :
								case 'Function' :
								case 'Integer' :
								case 'Mark' : // FIXME
								case 'Number' :
								case 'Object' :
								case 'String' :
								case 'Tree' : // FIXME

									r.push(
										'\t\t' + attr.vName +
											' === inherit.' + attr.assign
									);

									break;

								default :

									if( !attr.allowsNull && !attr.allowsUndefined )
									{
										r.push(
											'\t\t' + attr.vName +
												'.equals( inherit.' + attr.assign + ' )'
										);
									}
									else
									{
										r.push(
											'\t\t(',
											'\t\t\t' + attr.vName + ' === inherit.' + attr.assign,
											'\t\t\t||',
											'\t\t\t(',
											'\t\t\t\t' + attr.vName,
											'\t\t\t\t&&',
											'\t\t\t\t' + attr.vName +
												'.equals( inherit.' + attr.assign + ' )',
											'\t\t\t)',
											'\t\t)'
										);
									}

									break;
							}
						}

						r.push(
							'\t)',
							'\t{',
							'\t\treturn inherit;',
							'\t}',
							''
						);
					};


					/*
					| Generates the creators final return statement.
					*/
					var
					generateCreatorReturn =
						function(
							r,    // result array
							jj    // the joobj working object
						)
					{
						if( jj.singleton )
						{
							r.push(
								'\tif( !_singleton )',
								'\t{',
								'\t\t_singleton =',
								'\t\t\tnew ' + jj.reference + '(',
								'\t\t\t\t_tag',
								'\t\t\t);',
								'\t}',
								'',
								'\treturn _singleton;'
							);
						}
						else
						{
							r.push(
								'\treturn (',
								'\t\tnew ' + jj.reference + '(',
								'\t\t\t_tag,'
							);

							for(
								var a = 0, aZ = jj.conList.length;
								a < aZ;
								a++
							)
							{
								var
									con =
										jj.conVars[ jj.conList[ a ] ],

									sep =
										a + 1 < aZ ?  ',' : '';

									r.push(
										'\t\t\t' + con.vName + sep
									);
							}

							r.push(
								'\t\t)',
								'\t);'
							);
						}
					};


					/*
					| Generates the attribute variables for the creators.
					*/
					var
					generateAttributeVariables =
						function(
							r,       // result array
							jj,      // the joobj working object
							jsonOnly // generate only attributes that are in json
							// ...   // addtional to variable list ( 'inherit' )
						)
					{
						var
							a,
							aZ,
							aName,
							attr,

							list =
								[ ];

						for( aName in jj.attributes )
						{
							attr =
								jj.attributes[ aName ];

					//		FIXME
					//		if( jsonOnly && !attr.json )
					//		{
					//			continue;
					//		}

							list.push( attr.vName );
						}

						for(
							a = 3, aZ = arguments.length;
							a < aZ;
							a++
						)
						{
							if( arguments[ a ] )
							{
								list.push(
									arguments[ a ]
								);
							}
						}

						list.sort( );

						if( list.length > 0 )
						{
							r.push(
								'\tvar'
							);
						}

						for(
							a = 0, aZ = list.length;
							a < aZ;
							a++
						)
						{
							r.push(
								'\t\t' + list[ a ] +
									( a + 1 >= list.length ? ';' : ',' )
							);
						}

						r.push(
							''
						);
					};


					/*
					| Generates the creator.
					*/
					var
					generateCreator =
						function(
							r,  // result array
							jj  // the joobj working object
						)
					{
						r.push(
							'/*',
							'| Creates a new ' + jj.name + ' object.',
							'*/',
							jj.reference + '.create =',
							jj.reference + '.prototype.create =',
							'\tfunction('
						);

						if( jj.attrList )
						{
							r.push(
								'\t\t// free strings'
							);
						}

						r.push(
							'\t)',
							'{'
						);


						if( jj.attrList.length > 0 )
						{
							generateAttributeVariables(
								r,
								jj,
								false,
								'inherit',
								jj.twig ? 'twig' : null,
								jj.twig ? 'ranks' : null,
								jj.twig ? 'twigdup' : null,
								jj.twig ? 'key' : null
							);

							generateCreatorInheritanceReceiver( r, jj );

							generateCreatorFreeStringsParser( r, jj );
						}
						else
						{
							generateAttributeVariables( r, jj, false );
						}

						generateDefaultValues( r, jj, false );

						generateChecks( r, jj, false );

						generateCreatorConcerns( r, jj );

						generateCreatorFullInheritance( r, jj );

						generateCreatorReturn( r, jj );

						r.push( '};' );
					};


					/*
					| Generates the from JSON create
					*/
					var
					generateFromJSONCreator =
						function(
							r,  // result array
							jj  // the joobj working object
						)
					{
						var
							a,
							aZ,
							attr,
							name;

						r.push(
							'/*',
							'| Creates a new ' + jj.name + ' object from JSON',
							'*/',
							jj.reference + '.createFromJSON =',
							'\tfunction(',
							'\t\tjson // the json object',
							'\t)',
							'{'
						);

						// TODO remove
						r.push(
							'\tif( json._$grown ) return json;',
							''
						);

						generateAttributeVariables(
							r,
							jj,
							true,
							jj.twig ? 'twig' : null,
							jj.twig ? 'ranks' : null
						);

						r.push(
							'\tfor( var aName in json )',
							'\t{',
							'\t\tvar',
							'\t\t\targ =',
							'\t\t\t\tjson[ aName ];',
							'',
							'\t\tswitch( aName )',
							'\t\t{',
							'\t\t\tcase \'type\' :',
							'',
							'\t\t\t\tif( arg !== \'' + jj.name + '\')',
							'\t\t\t\t{',
							'\t\t\t\t\tthrow new Error(',
							'\t\t\t\t\t\t\'invalid JSON\'',
							'\t\t\t\t\t);',
							'\t\t\t\t}',
							'',
							'\t\t\t\tbreak;'
						);

						for(
							a = 0, aZ = jj.jsonList.length;
							a < aZ;
							a++
						)
						{
							name =
								jj.jsonList[ a ];

							if(
								name === 'twig'
								||
								name === 'ranks'
							)
							{
								r.push(
									'',
									'\t\t\tcase \''+ name +'\' :',
									'',
									'\t\t\t\t' + name + ' =',
									'\t\t\t\t\tjson.' + name + ';',
									'',
									'\t\t\t\tbreak;'
								);

								continue;
							}

							attr =
								jj.attributes[ jj.jsonList[ a ] ];

							r.push(
								'',
								'\t\t\tcase \'' + attr.aName + '\' :',
								'',
								'\t\t\t\t' + attr.vName + ' ='
							);

							switch( attr.type )
							{
								case 'Boolean' :
								case 'Integer' :
								case 'Number' :
								case 'String' :

									r.push(
										'\t\t\t\t\targ;'
									);

									break;

								default :

									r.push(
										'\t\t\t\t\t' +
											(
												attr.unit ?
												( attr.unit + '.' )
												:
												''
											) +
											attr.type + '.createFromJSON(',
										'\t\t\t\t\t\targ',
										'\t\t\t\t\t);'
									);

									break;
							}

							r.push(
								'',
								'\t\t\t\tbreak;',
								''
							);
						}

						r.push(
							'\t\t\tdefault :',
							'',
							'\t\t\t\tthrow new Error(',
							'\t\t\t\t\t\'invalid JSON: \' + aName',
							'\t\t\t\t);',
							'\t\t}',
							'\t}',
							''
						);

					//	XXX

						generateDefaultValues( r, jj, true );

						generateChecks( r, jj, true );

						r.push(
							'\treturn (',
							'\t\tnew ' + jj.reference + '(',
							'\t\t\t_tag,'
						);

						for(
							a = 0, aZ = jj.conList.length;
							a < aZ;
							a++
						)
						{
							var
								con =
									jj.conVars[ jj.conList[ a ] ];

							if( con.aName === 'inherit' )
							{
								r.push(
									'\t\t\tnull' +
										( a + 1 < aZ ? ',' : '' )
								);

								continue;
							}

							r.push(
								'\t\t\t' + con.vName +
									( a + 1 < aZ ? ',' : '' )
							);
						}

						r.push(
							'\t\t)',
							'\t);',
							'};'
						);
					};


					/*
					| Generates the reflection section.
					*/
					var
					generateReflectionSection =
						function(
							r,   // result array
							jj   // the joobj working object
						)
					{
						r.push(
							'/*',
							'| Reflection.',
							'*/',
							jj.reference + '.prototype.reflect =',
							'\t\'' + jj.name + '\';'
						);

						// FIXME this is some workaround
						if( jj.hasJSON )
						{
							r.push(
								'',
								'',
								'/*',
								'| Workaround meshverse growing',
								'*/',
								jj.reference + '.prototype._$grown =',
								'\ttrue;'
							);
						}
					};


					/*
					| Generates the addition of JoobjProto stuff.
					*/
					var
					generateProtoSection =
						function(
							r,   // result array
							jj   // the joobj working object
						)
					{
						r.push(
							'/*',
							'| Sets values by path.',
							'*/',
							jj.reference + '.prototype.setPath =',
							'\tJoobjProto.setPath;'
						);

						generateSeperator( r );

						r.push(
							'/*',
							'| Gets values by path.',
							'*/',
							jj.reference + '.prototype.getPath =',
							'\tJoobjProto.getPath;'
						);

						if( jj.twig )
						{
							generateSeperator( r );

							r.push(
								'/*',
								'| .',
								'*/',
								jj.reference + '.prototype.atRank =',
								'\tJoobjProto.atRank;'
							);
						}
					};


					/*
					| Generates the toJSON section.
					*/
					var
					generateToJSONSection =
						function(
							r,   // result array
							jj   // the joobj working object
						)
					{
						var
							a,
							aZ,
							name;

						r.push(
							'/*',
							'| Convers the object into a JSON.',
							'*/',
							'Jools.lazyValue(',
							'\t' + jj.reference + '.prototype,',
							'\t\'toJSON\',',
							'\tfunction( )',
							'\t{',
							'\t\tvar',
							'\t\t\tjson;',
							'',
							'\t\tjson =',
							'\t\t\tObject.freeze( {',
							'\t\t\t\ttype :',
							'\t\t\t\t\t\'' + jj.name + '\','
						);

						for(
							a = 0, aZ = jj.jsonList.length;
							a < aZ;
							a++
						)
						{
							name =
								jj.jsonList[ a ];

							r.push(
								'\t\t\t\t\'' + name + '\' :',
								'\t\t\t\t\tthis.' + name +
									( a + 1 < aZ ? ',' : '' )
							);
						}

						r.push(
							'\t\t} );',
							'',
							'\t\treturn function( ) { return json; };',
							'\t}',
							');'
						);
					};



					/*
					| Generates a primitive equals check.
					*/
					var
					generatePrimitiveEqualsCheck =
						function(
							r,   // result array
							jj   // the joobj working object
						)
					{
						r.push(
							'/*',
							'| Checks for equal objects.',
							'*/',
							jj.reference + '.prototype.equals =',
							'\tfunction(',
							'\t\tobj',
							'\t)',
							'{',
							'\treturn this === obj;',
							'};'
						);
					};


					/*
					| Generates the equals check.
					*/
					var
					generateEqualsCheck =
						function(
							r,   // result array
							jj   // the joobj working object
						)
					{
						var
							a,
							aZ,

							// attribute name
							aName,
							attr;

						r.push(
							'/*',
							'| Checks for equal objects.',
							'*/',
							jj.reference + '.prototype.equals =',
							'\tfunction(',
							'\t\tobj',
							'\t)',
							'{',
							'\tif( this === obj )',
							'\t{',
							'\t\treturn true;',
							'\t}',
							'',
							'\tif( !obj )',
							'\t{',
							'\t\treturn false;',
							'\t}',
							'',
							'\treturn ('
						);

						var
							first =
								true;

						if( jj.twig )
						{
							r.push(
								'\t\tthis.twig === obj.twig'
							);

							first =
								false;
						}

						for(
							a = 0, aZ = jj.attrList.length;
							a < aZ;
							a++
						)
						{
							aName =
								jj.attrList[ a ],

							attr =
								jj.attributes[ aName ];

							if( attr.assign === null )
							{
								continue;
							}

							if( !first )
							{
								r.push(
									'\t\t&&'
								);
							}
							else
							{
								first =
									false;
							}

							switch( attr.type )
							{
								case 'Boolean' :
								case 'Integer' :
								case 'Mark' : // FIXME
								case 'Number' :
								case 'String' :
								case 'Tree' : // FIXME

									r.push(
										'\t\tthis.' + attr.assign +
											' === obj.' + attr.assign
									);

									break;

								default :

									if( !attr.allowsNull )
									{
										r.push(
											'\t\tthis.' + attr.assign +
												'.equals( obj.' + attr.assign + ' )'
										);
									}
									else
									{
										r.push(
											'\t\t(',
											'\t\t\tthis.' + attr.assign +
												' === obj.' + attr.assign +
												' ||',
											'\t\t\t(',
											'\t\t\t\tthis.' + attr.assign + ' !== null',
											'\t\t\t\t&&',
											'\t\t\t\tthis.' + attr.assign +
												'.equals( obj.' + attr.assign + ' )',
											'\t\t\t)',
											'\t\t)'
										);
									}

									break;
							}
						}

						r.push(
							'\t);',
							'};'
						);
					};


					/*
					| Generates code from a jools object definition.
					*/
					var
					joobjGenerator =
						function(
							joobj // the jools object definition
						)
					{
						var
							// the result array
							r =
								[ ];

						// tests if the joobj looks ok
						checkJoobj( joobj );

						// create joobj the datastructures to work with
						var
							jj =
								buildJJ( joobj );

						generateFileHeader( r );

						generateSeperator( r );

						generateExportSection(
							r,
							jj
						);

						generateSeperator( r );

						generateImportsSection( r, jj );

						generateSeperator( r );

						generateCapsuleHeader( r, jj );

						generateSeperator( r );

						if( jj.node )
						{
							generateNodeIncludesSection( r, jj );

							generateSeperator( r );
						}

						generateConstructor( r, jj );

						generateSeperator( r );

						if( jj.singleton )
						{
							generateSingletonSection( r );

							generateSeperator( r );
						}


						if( jj.subclass )
						{
							generateSubclassSection( r, jj );

							generateSeperator( r );
						}

						generateCreator( r, jj );

						generateSeperator( r );

						if( jj.hasJSON )
						{
							generateFromJSONCreator( r, jj );

							generateSeperator( r );
						}

						generateReflectionSection( r, jj );

						generateSeperator( r );

						generateProtoSection( r, jj );

						generateSeperator( r );

						if( jj.hasJSON )
						{
							generateToJSONSection( r, jj );

							generateSeperator( r );
						}

						switch( jj.equals )
						{
							case false :

								break;

							case undefined :
							case true :

								generateEqualsCheck( r, jj );

								generateSeperator( r );

								break;

							case 'primitive' :

								generatePrimitiveEqualsCheck( r, jj );

								generateSeperator( r );

								break;

							default :

								throw new Error(
									'invalid equals value: ' + jj.equals
								);
						}

						if( jj.node )
						{
							generateNodeExportSection( r, jj );

							generateSeperator( r );
						}

						generateCapsuleFooter( r );

						return r.join( '\n' );
					};


					/*
					| Node export
					*/
					module.exports =
						joobjGenerator;


					} )( );
				}
			},
			"jools": {
				"jools.js": function (exports, module, require) {
					/*
					| Common Javascript Tools for Meshcraft.
					|
					| Authors: Axel Kittenberger
					*/


					/*
					| Export
					*/
					var
						Jools =
							{ };


					/*
					| Imports
					*/
					var
						config,
						sha1hex;


					/*
					| Capsule
					*/
					( function( ) {
					'use strict';


					if( SERVER )
					{
						// in node
						config =
							require( '../../config' );

						sha1hex =
							require( './sha1' ).sha1hex;

						Jools.devel =
							config.develServer;
					}
					else
					{
						// in shell
						Jools.devel =
							config.develShell;
					}


					var
						puffed =
							config.debug.puffed;


					/*
					| Largest integer value.
					*/
					Jools.MAX_INTEGER =
						9007199254740992;


					/*
					| Compares two things.
					*/
					Jools.compare =
						function( o, p )
					{
						if( o > p )
						{
							return 1;
						}

						if( o < p )
						{
							return -1;
						}

						return 0;
					};


					/*
					| Returns true if o is defined
					| FIXME remove
					*/
					Jools.is =
						function( o )
					{
						return typeof( o ) !== 'undefined';
					};


					/*
					| Returns true if o is defined and not null
					*/
					Jools.isnon =
						function( o )
					{
						return (
							typeof( o ) !== 'undefined' &&
							o !== null
						);
					};


					/*
					| Returns true if o is an integer number
					*/
					Jools.isInteger =
						function( o )
					{
						return (
							typeof( o ) === 'number' &&
							Math.floor( o ) === o
						);
					};


					/*
					| Returns true if o is an Array
					*/
					Jools.isArray =
						function( o )
					{
						if( !o )
						{
							return false;
						}

						return o.constructor === Array;
					};


					/*
					| Returns true if o is a String
					*/
					Jools.isString  =
						function( o )
					{
						return (
							typeof( o ) === 'string' ||
							( o instanceof String )
						);
					};


					/*
					| Limits value to be between min and max
					*/
					Jools.limit =
						function(
							min,
							val,
							max
						)
					{
						if( min > max )
						{
							throw new Error(
								'limit() min > max'
							);
						}

						if( val < min )
						{
							return min;
						}

						if( val > max )
						{
							return max;
						}

						return val;
					};


					/*
					| Builds a fail message.
					*/
					var fail =
						function(
							args,
							aoffset
						)
					{
						var
							a =
								Array.prototype.slice.call(
									args,
									aoffset,
									args.length
								);

						for(
							var i = 2;
							i < arguments.length;
							i++
						)
						{
							a.push( arguments[ i ] );
						}

						var
							b =
								a.slice( );

						b.unshift( 'fail' );

						Jools.log.apply(
							null,
							b
						);

						throw Jools.reject( a.join(' ') );
					};


					/*
					| Throws a reject if condition is not met.
					*/
					Jools.check =
						function( condition )
					{
						if( !condition )
						{
							fail(
								arguments,
								1
							);
						}
					};


					/*
					| Throws a reject if v is not within limits
					*/
					Jools.checkLimits =
						function(
							v,
							low,
							high
						)
					{
						if ( v < low || v > high )
						{
							fail(
								arguments,
								3,
								low,
								'<=',
								v,
								'<=',
								high
							);
						}
					};


					/*
					| Hashes the password.
					*/
					Jools.passhash =
						function( pass )
					{
						return sha1hex( pass + '-meshcraft-8833' );
					};


					/*
					| Returns a rejection error.
					|
					| TODO remove
					*/
					Jools.reject =
						function(
							message
						)
					{
						// in devel mode any failure is fatal.{
						if( Jools.devel )
						{
							throw new Error( message );
						}

						Jools.log(
							'reject',
							'reject',
							message
						);

						return {
							ok :
								false,

							message :
								message
						};
					};


					/*
					| Returns an unique identifier.
					*/
					Jools.uid =
						function( )
					{
						var
							mime =
								'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

							ua =
								[ ];

						for(
							var a = 0;
							a < 3;
							a++
						)
						{
							var
								r32 =
									Math.floor( 0x100000000 * Math.random( ) );

							for( var b = 0; b < 6; b++ )
							{
								ua.push( mime[ r32 & 0x3F ] );

								r32 = r32 >>> 6;
							}
						}

						return ua.join( '' );
					};


					if( SERVER )
					{
					/*
					| Creates a random password with only numbers and lower case alphas.
					*/
					Jools.randomPassword =
						function(
							length
						)
					{
						var
							ch =
								'abcdefghijklmnopqrstuvwxyz0123456789',

							ua =
								[ ];

						for(
							var a = 0;
							a < length;
							a++
						)
						{
							ua.push( ch[ Math.floor( 36 * Math.random( ) ) ] );
						}

						return ua.join( '' );
					};
					}


					/*
					| Legacy (for opera browser)
					*/
					if( !Object.defineProperty )
					{
						console.log(
							'Using legacy Object.defineProperty'
						);

						Object.defineProperty = function(obj, label, funcs) {
							if (typeof(funcs.value) !== 'undefined') {
								obj[label] = funcs.value;
								return;
							}
							if (funcs.get) obj.__defineGetter__(label, funcs.get);
							if (funcs.set) obj.__defineSetter__(label, funcs.set);
						};
					}


					if( !Object.freeze )
					{
						console.log(
							'Using legacy Object.freeze'
						);

						Object.freeze =
							function( )
							{
							};
					}


					/*
					| Subclassing helper.
					|
					*/
					Jools.subclass =
						function(
							sub,   // prototype to become a subclass.
							base   // either a prototype to become the base.
							//     //   or a table of prototypes to become the base for multiple
							//     //   inheritance.
						)
					{
						function Inherit( ) { }

						if( base.constructor === Object )
						{
							// multiple inheritance
							// FIXME remove
							for( var name in base )
							{
								for( var k in base[name].prototype )
								{
									if( k === 'constructor' )
										continue;

									if( Inherit.prototype[ k ] )
									{
										throw new Error(
											CHECK &&
											(
												'Multiple inheritance clash for ' + sub + ' :' + k
											)
										);
									}
									Inherit.prototype[ k ] = base[ name ].prototype[ k ];
								}
							}
						}
						else
						{
							// single inheritance
							Inherit.prototype = base.prototype;
						}

						sub.prototype =
							new Inherit( );

						sub.prototype.constructor =
							sub;
					};


					/*
					| Throws an error if any argument is not an integer.
					*/
					Jools.ensureInt =
						function(
							// integers
						)
					{
						for( var a in arguments )
						{
							var arg = arguments[ a ];

							if( Math.floor( arg ) - arg !== 0 )
							{
								throw new Error(
									CHECK
									&&
									(
										arg + ' not an integer'
									)
								);
							}
						}
					};


					/*
					| Checks the definedness of a list of variables
					| and throws an arguments error if not.
					|
					| TODO remove
					*/
					Jools.ensureArgs =
						function(
							// list of:
							//   argument name, defined variable
						)
					{
						for(
							var a = 0, aZ = arguments.length;
							a < aZ;
							a += 2
						)
						{
							var arg =
								arguments[ a + 1 ];

							if( arg === undefined )
							{
								throw new Error(
									CHECK
									&&
									(
										'argument missing: ' + arguments[ a ]
									)
								);
							}
						}
					};


					/*
					| Sets an not enumerable value
					|
					| if writable is undefined, defaults to false
					*/
					Jools.innumerable =
						function(
							obj,
							key,
							value,
							writable
						)
					{
						Object.defineProperty(
							obj,
							key,
							{
								value    : value,
								writable : typeof( writable ) === 'undefined' ? false : writable
							}
						);

						return value;
					};


					/*
					| A value is computed and fixated only when needed.
					*/
					Jools.lazyValue =
						function(
							proto,
							key,
							getter
						)
					{
						Object.defineProperty(
							proto,
							key,
							{
								// this clever overriding does not work in IE9 :-( or Android 2.2 Browser
								// get : function() { return fixate(this, key, getter.call(this)); },

								get : function( )
								{
									var
										ckey =
											'_lazy_' + key;

									if( this[ ckey ] !== undefined )
									{
										return this[ ckey ];
									}

									return (
										Jools.innumerable(
											this,
											ckey,
											getter.call( this )
										)
									);
								}
							}
						);
					};


					/*
					| A lazy value is computed and fixated before it is needed.
					*/
					Jools.aheadValue =
						function(
							obj,
							key,
							value
						)
					{
						var
							ckey =
								'_lazy_' + key;

					/**/if( CHECK )
					/**/{
					/**/	var
					/**/		proto =
					/**/			Object.getPrototypeOf( obj ),
					/**/
					/**/		desc =
					/**/			Object.getOwnPropertyDescriptor(
					/**/				proto,
					/**/				key
					/**/			);
					/**/
					/**/	if( !desc || typeof( desc.get ) !== 'function' )
					/**/	{
					/**/		throw new Error(
					/**/			'aheadValue not a lazyValue'
					/**/		);
					/**/	}
					/**/
					/**/	if( obj[ ckey ] )
					/**/	{
					/**/		throw new Error(
					/**/			'aheadValue already computed'
					/**/		);
					/**/	}
					/**/}

						return (
							Jools.innumerable(
								obj,
								ckey,
								value
							)
						);
					};


					/*
					| A function that will always result in the same thing.
					*/
					/*
					Jools.lazyFunction =
						function(
							proto,
							key,
							getter
						)
					{
						Object.defineProperty(
							proto,
							key,
							{
								get : function( )
								{
									var
										ckey =
											'_lazy_' + key,

										cFuncKey =
											'_lazyFunc_' + key;

									if( Jools.is( this[ cFuncKey ] ) )
									{
										return this[ cFuncKey ];
									}

									Jools.innumerable(
										this,
										ckey,
										getter.call( this )
									);

									var
										cFunc =
											function( )
											{
												return this[ ckey ];
											};

									Jools.innumerable(
										this,
										cFuncKey,
										cFunc
									);

									return cFunc;
								}
							}
						);
					};
					*/

					/*
					| Copies one object (not deep!)
					*/
					Jools.copy =
						function(
							o  // the object to copy from
						)
					{
						var
							c =
								{ };

						for( var k in o )
						{
							if( !Object.hasOwnProperty.call( o, k ) )
							{
								continue;
							}

							c[ k ] =
								o[ k ];
						}

						return c;
					};


					/*
					| Returns true if a node matches another node
					*/
					Jools.matches =
						function(
							// o1,
							// o2
						)
					{
						// FIXME fix this
						return true;

						/*
						if( o1 === o2 )
						{
							return true;
						}

						// numbers or strings would have matched before
						switch( o1.constructor )
						{
							case String :
								return false;

							case Number :
								return false;
						}

						// also if either is null an not equal
						if(
							o1 === null ||
							o2 === null
						)
						{
							return false;
						}

						var
							k1 =
								Object.keys( o1 );

						var
							k2 =
								Object.keys( o2 );

						if( k1.length !== k2.length )
						{
							return false;
						}

						for(
							var a = 0, aZ = k1.length;
							a < aZ;
							a++
						)
						{
							var k =
								k1[ a ];

							if(
								!Jools.matches(
									o1[ k ],
									o2[ k ]
								)
							)
							{
								return false;
							}
						}

						return true;
						*/
					};


					/*
					| Pushes a 2-decimal number on an string-array.
					*/
					var _pushpad =
						function(
							a,   // the array
							n,   // the number to push
							s    // the separator
						)
					{
						if( n < 10 )
						{
							a.push( '0' );
						}

						a.push( n );
						a.push( s );

						return a;
					};


					/*
					| Creates a timestamp
					| which will be returned as joinable array.
					*/
					var _timestamp =
						function( a )
					{
						var now =
							new Date( );

						_pushpad( a, now.getMonth( ) + 1, '-' );
						_pushpad( a, now.getDate( ),      ' ' );
						_pushpad( a, now.getHours( ),     ':' );
						_pushpad( a, now.getMinutes( ),   ':' );
						_pushpad( a, now.getSeconds( ),   ' ' );

						return a;
					};


					/*
					| Pushes spaces into array for indentation.
					*/
					var _pushindent =
						function(
							indent,  // the amount of spaces to push on the array
							a        // the array
						)
					{
						for( var i = 0; i < indent; i++ )
						{
							a.push( '  ' );
						}
					};


					/*
					| Inspects an object and creates a descriptive string for it.
					|
					| Self-written instead of node.JS' since not available in browser.
					| Not using toJSON since that fails on circles.
					| This is the jools-internal version that pushes data directly on the array stack.
					*/
					var _inspect =
						function(
							o,
							array,
							indent,
							circle
						)
					{
						if( circle.indexOf( o ) !== -1 )
						{
							array.push('^circle^');
							return;
						}

						circle = circle.slice( );
						circle.push( o );

						if( !indent )
							{ indent = 0; }

						if( o && o.toJSON )
							{ o = o.toJSON(); }

						var to = typeof( o );

						if( to === 'undefined' )
						{
						}
						else if( o === null )
						{
							to = 'null';
						}
						else
						{
							switch( o.constructor )
							{
								case String :
									to = 'string';
									break;

								case Array :
									to = 'array';
									break;
							}
						}

						var k, first;

						switch( to )
						{
							case 'undefined' :

								array.push( 'undefined' );
								return;

							case 'boolean' :

								array.push(o ? 'true' : 'false');
								return;

							case 'function' :

								array.push('function '); if (o.name) array.push(o.name);
								return;

							case 'string' :

								array.push('"', o, '"');
								return;

							case 'number' :

								array.push(o);
								return;

							case 'null' :

								array.push('null');
								return;

							case 'array' :

								array.push( '[' );
								if( puffed )
									{ array.push( '\n' ); }

								for( var a = 0, aZ = o.length; a < aZ; a++)
								{
									if( a > 0 )
									{
										array.push( ',' );
										array.push( puffed ? '\n' : ' ' );
									}

									if( puffed )
										{ _pushindent( indent + 1, array ); }

									_inspect(
										o[ a ],
										array,
										indent + 1,
										circle
									);
								}

								first = true;
								for( k in o )
								{
									if(
										typeof(k) === 'number' ||
										parseInt(k, 10) == k ||
										!o.hasOwnProperty(k)
									){
										continue;
									}

									if( first )
									{
										array.push(puffed ? '\n' : ' ');
										if (puffed) _pushindent(indent + 1, array);
										array.push('|');
										array.push(puffed ? '\n' : ' ');
										first = false;
									}
									else
									{
										array.push(',');
										array.push(puffed ? '\n' : ' ');
										if (puffed) _pushindent(indent + 1, array);
									}
									array.push(k);
									array.push(': ');
									_inspect(o[k], array, indent + 1, circle);
									array.push(puffed ? '\n' : ' ');
								}
								array.push(puffed ? '\n' : ' ');

								if( puffed )
									{ _pushindent( indent, array ); }

								array.push( ']' );
								return;

							case 'object' :

								array.push(
									'{',
									puffed ? '\n' : ' '
								);

								first = true;

								for( k in o )
								{
									if( !o.hasOwnProperty(k) )
										{ continue; }
									if (!first) array.push(',', puffed ? '\n' : ' '); else first = false;
									if (puffed) _pushindent(indent + 1, array);
									array.push(k, ': ');

									_inspect(o[k], array, indent + 1, circle);
								}

								array.push(
									puffed ? '\n' : ' '
								);

								if( puffed )
								{
									_pushindent(
										indent,
										array
									);
								}

								array.push( '}' );

								return;

							default :
								array.push( '!!Unknown Type: ', to, '!!' );

							}
					};


					/*
					| Logs a number of inspected argument
					| if category is configured to be logged.
					*/
					Jools.log =
						function(
							category
						)
					{
						if(
							category !== true
							&&
							!config.log.all
							&&
							!config.log[ category ]
						)
						{
							return;
						}

						var a = _timestamp( [ ] );

						if( category !== true )
						{
							a.push( '(' );
							a.push( category );
							a.push( ') ' );
						}

						for( var i = 1; i < arguments.length; i++ )
						{
							if( i > 1 )
							{
								a.push(' ');
							}

							_inspect(
								arguments[ i ],
								a,
								0,
								[ ]
							);
						}

						console.log(
							a.join( '' )
						);
					};


					/*
					| Logs creation of new entities.
					*/
					Jools.logNew =
						function(
							entity,
							path
						)
					{
						if(
							!config.log.all
							&&
							!config.log.news
						)
						{
							return;
						}

						Jools.log(
							'news',
							entity.reflect,
							path.string
						);
					};


					/*
					| Shortcut for log('debug', ...);
					*/
					Jools.debug =
						function( )
					{
						if( !config.log.debug )
						{
							return;
						}

						var a =
							_timestamp( [ ] );

						a.push( '(debug) ' );

						for( var i = 0; i < arguments.length; i++ )
						{
							if (i > 0)
							{
								a.push(' ');
							}

							_inspect(
								arguments[ i ],
								a,
								0,
								[ ]
							);
						}

						console.log(
							a.join( '' )
						);
					};


					/*
					| Returns a descriptive string for an object.
					*/
					Jools.inspect =
						function( o )
					{
						var a = [ ];

						_inspect(
							o,
							a,
							0,
							[ ]
						);

						return a.join( '' );
					};


					/*
					| Makes an object immutable
					*/
					Jools.immute =
						function(
							obj
						)
					{
						// for releases immute checking is disabled in favor of speed
						if( !config.debug.immute )
						{
							return obj;
						}

						var
							names =
								Object.getOwnPropertyNames( obj );

						for(
							var a = 0, aZ = names.length;
							a < aZ;
							a++
						)
						{
							var name =
								names[ a ];

							if(
								name.substring( 0, 1 ) === '$' ||
								name.substring( 0, 2 ) === '_$'
							)
							{
								continue;
							}

							var desc =
								Object.getOwnPropertyDescriptor(
									obj,
									names[ a ]
								);

							if( !desc.configurable )
							{
								continue;
							}

							desc.configurable =
								false;

							desc.writable =
								false;

							Object.defineProperty(
								obj,
								name,
								desc
							);
						}

						return obj;
					};


					/*
					| Makes a key not to be accessed.
					|
					| Used for developing during changes
					*/
					Jools.keyNonGrata =
						function(
							obj,
							key
						)
					{
						Object.defineProperty(
							obj,
							key,
							{
								get :
									function( )
									{
										throw new Error(
											CHECK
											&&
											(
												'accessed key non grata! ' + key
											)
										);
									},

								set :
									function(
										// v
									)
									{
										throw new Error(
											CHECK
											&&
											(
												'accessed key non grata! ' + key
											)
										);
									}
							}
						);
					};

					// divides by 2 and rounds up
					Jools.half =
						function( v )
					{
						return Math.round( v / 2 );
					};



					/*
					| Node export
					*/
					if( SERVER )
					{
						module.exports =
							Jools;
					}


					} )( );


				},
				"sha1.js": function (exports, module, require) {
					/*
					---
					name: String.SHA-1
					description: String SHA1 hashing.
					license: MIT-style
					authors: [Christopher Pitt, Enrique Erne]
					...
					[Axel Kittenberger]
					* imported from:
					  https://github.com/sixtyseconds/mootools-string-cryptography/blob/master/Source/String.SHA-1.js
					  https://github.com/sixtyseconds/mootools-string-cryptography/blob/master/Source/String.UTF-8.js
					* made browser/node shared friendly
					* changed it to not alter String.prototype
					* cleaned from jshint warnings
					* restructured code
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


					/*
					| Exports
					*/
					var
						sha1hex =
							null;

					/*
					| Capsule
					*/
					(function( ) {
					'use strict';


					var toUTF8 =
						function(
							str
						)
					{
						var a, b;
						var result = '';
						var code = String.fromCharCode;

						str = str.replace(/\r\n/g,"\n");

						for (a = 0; (b = str.charCodeAt(a)); a++){
							if (b < 128){
								result += code(b);
							} else if ((b > 127) && (b < 2048)){
								result += code((b >> 6) | 192);
								result += code((b & 63) | 128);
							} else {
								result += code((b >> 12) | 224);
								result += code(((b >> 6) & 63) | 128);
								result += code((b & 63) | 128);
							}
						}

						return result;
					};

					var rotateLeft =
						function( a, b )
					{
						return ( a << b ) | ( a >>> ( 32 - b ) );
					};

					var tohex =
						function( a )
					{
						var r = '';
						for (var b = 7; b >= 0; b--)
						{
							r += ((a >>> (b * 4)) & 0x0f).toString(16);
						}

						return r;
					};

					sha1hex =
						function( str )
					{
						var a, b;
						var h1 = 0x67452301;
						var h2 = 0xEFCDAB89;
						var h3 = 0x98BADCFE;
						var h4 = 0x10325476;
						var h5 = 0xC3D2E1F0;
						var t1, t2, t3, t4, t5;

						str = toUTF8(str);

						var len = str.length;
						var words = [];
						var buffer = new Array(80);

						var code = function(a) { return str.charCodeAt(a); };

						var	assign = function(c){
							var b5 = t5;
							t5 = t4;
							t4 = t3;
							t3 = rotateLeft(t2, 30);
							t2 = t1;
							t1 = (rotateLeft(t1, 5) + b5 + buffer[a] + c) & 0x0ffffffff;
						};

						for (a = 0; a < len - 3; a += 4){
							words.push(code(a) << 24 | code(a + 1) << 16 | code(a + 2) << 8 | code(a + 3));
						}

						switch (len % 4){
							case 0: a = 0x080000000; break;
							case 1: a = code(len - 1) << 24 | 0x0800000; break;
							case 2: a = code(len - 2) << 24 | code(len - 1) << 16 | 0x08000; break;
							case 3: a = code(len - 3) << 24 | code(len - 2) << 16 | code(len - 1) << 8 | 0x80; break;
						}

						words.push(a);

						while ((words.length % 16) != 14) {
							words.push(0);
						}

						words.push(len >>> 29);
						words.push((len << 3) & 0x0ffffffff);

						for (b = 0; b < words.length; b += 16) {
							for (a = 0; a < 16; a++) {
								buffer[a] = words[b + a];
							}

							for (a = 16; a <= 79; a++) {
								buffer[a] = rotateLeft(
									buffer[a - 3] ^ buffer[a - 8] ^ buffer[a - 14] ^ buffer[a - 16], 1);
							}

							t1 = h1; t2 = h2; t3 = h3; t4 = h4; t5 = h5;

							a = 0;
							for (; a < 20; a++) { assign(((t2 & t3) | (~t2 & t4))            + 0x5A827999); }
							for (; a < 40; a++) { assign((t2 ^ t3 ^ t4)                      + 0x6ED9EBA1); }
							for (; a < 60; a++) { assign(((t2 & t3) | (t2 & t4) | (t3 & t4)) + 0x8F1BBCDC); }
							for (; a < 80; a++) { assign((t2 ^ t3 ^ t4)                      + 0xCA62C1D6); }

							h1 = (h1 + t1) & 0x0ffffffff;
							h2 = (h2 + t2) & 0x0ffffffff;
							h3 = (h3 + t3) & 0x0ffffffff;
							h4 = (h4 + t4) & 0x0ffffffff;
							h5 = (h5 + t5) & 0x0ffffffff;
						}

						return (
							tohex(h1) +
							tohex(h2) +
							tohex(h3) +
							tohex(h4) +
							tohex(h5)
						).toLowerCase();
					};

					/**
					| Node exports
					*/
					if( SERVER )
					{
						module.exports =
						{
							sha1hex :
								sha1hex
						};
					}

					})( );
				}
			},
			"tools": {
				"single-joobj.js": function (exports, module, require) {
					/*
					| Runs the joobj generator for a single file
					|
					| Authors: Axel Kittenberger
					*/

					/*
					| Capsule.
					*/
					(function( ) {
					'use strict';

					GLOBAL.CHECK =
						true;

					GLOBAL.JOOBJ =
						false;

					GLOBAL.SERVER =
						true;

					GLOBAL.SHELL =
						false;

					if( typeof( require ) === 'undefined' )
					{
						throw new Error(
							'this code requires node!'
						);
					}

					var
						argv =
							process.argv,

						fs =
							require( 'fs' ),

						vm =
							require( 'vm' ),

						joobjGenerator =
							require( '../joobj/generator' ),

						input =
							null,

						joobj =
							null,

						output =
							null,

						readOptions =
							{
								encoding :
									'utf8'
							};


					if( argv.length !== 3 )
					{
						console.log(
							'Usage: ' + argv[ 0 ] + ' JDEF-FILE'
						);

						process.exit( -1 );
					}

					var
						inFilename =
							argv[ 2 ];

					input =
						fs.readFileSync(
							inFilename,
							readOptions
						);

					joobj =
						vm.runInNewContext(
							input,
							{
								JOOBJ :
									true
							},
							inFilename
						);

					output =
						joobjGenerator( joobj );

					/*
					var
						outFilename =
							'../joobj/'
							+
							inFilename
								.replace( /\//g, '-' );

					fs.writeFileSync(
						outFilename,
						output
					);
					*/

					console.log( output + '' );


					} )( );
				}
			}
		}
	}
})("meshcraft/src/tools/single-joobj");
