/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Widgets =
		Widgets || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		471648746;


/*
| Constructor.
*/
var Label =
Widgets.Label =
	function(
		tag,
		v_designPos,  // designed position of the text
		v_font,       // font of the text
		v_newline,    // vertical distance of newline
		v_path,       // the path of the widget
		v_superFrame, // the frame the widget resides in
		v_text,       // the label text
		v_visible     // if false the button is hidden
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.designPos =
		v_designPos;

	this.font =
		v_font;

	this.newline =
		v_newline;

	this.path =
		v_path;

	this.superFrame =
		v_superFrame;

	this.text =
		v_text;

	this.visible =
		v_visible;

	this._init( );

	Jools.immute( this );
};


Jools.subclass(
	Label,
	Widgets.Widget
);


/*
| Creates a new Label object.
*/
Label.create =
Label.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_designPos,
		v_focusAccent,
		v_font,
		v_hover,
		v_mark,
		v_newline,
		v_path,
		v_superFrame,
		v_text,
		v_visible;

	if( this !== Label )
	{
		inherit =
			this;

		v_designPos =
			this.designPos;

		v_font =
			this.font;

		v_newline =
			this.newline;

		v_path =
			this.path;

		v_superFrame =
			this.superFrame;

		v_text =
			this.text;

		v_visible =
			this.visible;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'designPos' :

				if( arg !== undefined )
				{
					v_designPos =
						arg;
				}

				break;

			case 'focusAccent' :

				if( arg !== undefined )
				{
					v_focusAccent =
						arg;
				}

				break;

			case 'font' :

				if( arg !== undefined )
				{
					v_font =
						arg;
				}

				break;

			case 'hover' :

				if( arg !== undefined )
				{
					v_hover =
						arg;
				}

				break;

			case 'mark' :

				if( arg !== undefined )
				{
					v_mark =
						arg;
				}

				break;

			case 'newline' :

				if( arg !== undefined )
				{
					v_newline =
						arg;
				}

				break;

			case 'path' :

				if( arg !== undefined )
				{
					v_path =
						arg;
				}

				break;

			case 'superFrame' :

				if( arg !== undefined )
				{
					v_superFrame =
						arg;
				}

				break;

			case 'text' :

				if( arg !== undefined )
				{
					v_text =
						arg;
				}

				break;

			case 'visible' :

				if( arg !== undefined )
				{
					v_visible =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

	if( v_focusAccent === undefined )
	{
		v_focusAccent =
			null;
	}

	if( v_font === undefined )
	{
		v_font =
			null;
	}

	if( v_hover === undefined )
	{
		v_hover =
			null;
	}

	if( v_mark === undefined )
	{
		v_mark =
			null;
	}

	if( v_newline === undefined )
	{
		v_newline =
			null;
	}

	if( v_path === undefined )
	{
		v_path =
			null;
	}

	if( v_superFrame === undefined )
	{
		v_superFrame =
			null;
	}

	if( v_visible === undefined )
	{
		v_visible =
			true;
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_designPos === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute designPos'
/**/		);
/**/	}
/**/
/**/	if( v_designPos === null )
/**/	{
/**/		throw new Error(
/**/			'designPos must not be null'
/**/		);
/**/	}
/**/	if( v_designPos.reflect !== 'AnchorPoint' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_focusAccent === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute focusAccent'
/**/		);
/**/	}
/**/
/**/	if( v_focusAccent !== null )
/**/	{
/**/		if(
/**/			typeof( v_focusAccent ) !== 'boolean'
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_font === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute font'
/**/		);
/**/	}
/**/
/**/	if( v_font !== null )
/**/	{
/**/		if( v_font.reflect !== 'Font' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_hover === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute hover'
/**/		);
/**/	}
/**/
/**/	if( v_hover !== null )
/**/	{
/**/		if( v_hover.reflect !== 'Path' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_mark === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute mark'
/**/		);
/**/	}
/**/
/**/	if( v_newline === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute newline'
/**/		);
/**/	}
/**/
/**/	if( v_newline !== null )
/**/	{
/**/		if(
/**/			typeof( v_newline ) !== 'number'
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_path === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute path'
/**/		);
/**/	}
/**/
/**/	if( v_path !== null )
/**/	{
/**/		if( v_path.reflect !== 'Path' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_superFrame === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute superFrame'
/**/		);
/**/	}
/**/
/**/	if( v_superFrame !== null )
/**/	{
/**/		if( v_superFrame.reflect !== 'Rect' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_text === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute text'
/**/		);
/**/	}
/**/
/**/	if( v_text === null )
/**/	{
/**/		throw new Error(
/**/			'text must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_text ) !== 'string'
/**/		&&
/**/		!( v_text instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_visible === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute visible'
/**/		);
/**/	}
/**/
/**/	if( v_visible === null )
/**/	{
/**/		throw new Error(
/**/			'visible must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_visible ) !== 'boolean'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		v_designPos.equals( inherit.designPos )
		&&
		v_focusAccent === null
		&&
		(
			v_font === inherit.font
			||
			(
				v_font
				&&
				v_font.equals( inherit.font )
			)
		)
		&&
		v_hover === null
		&&
		v_mark === null
		&&
		v_newline === inherit.newline
		&&
		(
			v_path === inherit.path
			||
			(
				v_path
				&&
				v_path.equals( inherit.path )
			)
		)
		&&
		(
			v_superFrame === inherit.superFrame
			||
			(
				v_superFrame
				&&
				v_superFrame.equals( inherit.superFrame )
			)
		)
		&&
		v_text === inherit.text
		&&
		v_visible === inherit.visible
	)
	{
		return inherit;
	}

	return (
		new Label(
			_tag,
			v_designPos,
			v_font,
			v_newline,
			v_path,
			v_superFrame,
			v_text,
			v_visible
		)
	);
};


/*
| Reflection.
*/
Label.prototype.reflect =
	'Label';


/*
| Sets values by path.
*/
Label.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Label.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
Label.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.designPos.equals( obj.designPos )
		&&
		(
			this.font === obj.font ||
			(
				this.font !== null
				&&
				this.font.equals( obj.font )
			)
		)
		&&
		this.newline === obj.newline
		&&
		(
			this.path === obj.path ||
			(
				this.path !== null
				&&
				this.path.equals( obj.path )
			)
		)
		&&
		(
			this.superFrame === obj.superFrame ||
			(
				this.superFrame !== null
				&&
				this.superFrame.equals( obj.superFrame )
			)
		)
		&&
		this.text === obj.text
		&&
		this.visible === obj.visible
	);
};


} )( );
