/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Euclid =
		Euclid || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		213237641;


/*
| Constructor.
*/
var Shape =
Euclid.Shape =
	function(
		tag,
		v_hull, // hull definition
		v_pc    // center point
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.hull =
		v_hull;

	this.pc =
		v_pc;

	Jools.immute( this );
};


/*
| Creates a new Shape object.
*/
Shape.create =
Shape.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_hull,
		v_pc;

	if( this !== Shape )
	{
		inherit =
			this;

		v_hull =
			this.hull;

		v_pc =
			this.pc;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'hull' :

				if( arg !== undefined )
				{
					v_hull =
						arg;
				}

				break;

			case 'pc' :

				if( arg !== undefined )
				{
					v_pc =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_hull === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute hull'
/**/		);
/**/	}
/**/
/**/	if( v_hull === null )
/**/	{
/**/		throw new Error(
/**/			'hull must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_pc === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute pc'
/**/		);
/**/	}
/**/
/**/	if( v_pc === null )
/**/	{
/**/		throw new Error(
/**/			'pc must not be null'
/**/		);
/**/	}
/**/	if( v_pc.reflect !== 'Point' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		v_hull === inherit.hull
		&&
		v_pc.equals( inherit.pc )
	)
	{
		return inherit;
	}

	return (
		new Shape(
			_tag,
			v_hull,
			v_pc
		)
	);
};


/*
| Reflection.
*/
Shape.prototype.reflect =
	'Shape';


/*
| Sets values by path.
*/
Shape.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Shape.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
Shape.prototype.equals =
	function(
		obj
	)
{
	return this === obj;
};


} )( );
