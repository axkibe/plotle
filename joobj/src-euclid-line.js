/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Euclid =
		Euclid || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		845768808;


/*
| Constructor.
*/
var Line =
Euclid.Line =
	function(
		tag,
		v_p1,    // first point
		v_p1end, // end style of first point
		v_p2,    // second point
		v_p2end  // end style of second point
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.p1 =
		v_p1;

	this.p1end =
		v_p1end;

	this.p2 =
		v_p2;

	this.p2end =
		v_p2end;

	Jools.immute( this );
};


/*
| Creates a new Line object.
*/
Line.create =
Line.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_p1,
		v_p1end,
		v_p2,
		v_p2end;

	if( this !== Line )
	{
		inherit =
			this;

		v_p1 =
			this.p1;

		v_p1end =
			this.p1end;

		v_p2 =
			this.p2;

		v_p2end =
			this.p2end;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'p1' :

				if( arg !== undefined )
				{
					v_p1 =
						arg;
				}

				break;

			case 'p1end' :

				if( arg !== undefined )
				{
					v_p1end =
						arg;
				}

				break;

			case 'p2' :

				if( arg !== undefined )
				{
					v_p2 =
						arg;
				}

				break;

			case 'p2end' :

				if( arg !== undefined )
				{
					v_p2end =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_p1 === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute p1'
/**/		);
/**/	}
/**/
/**/	if( v_p1 === null )
/**/	{
/**/		throw new Error(
/**/			'p1 must not be null'
/**/		);
/**/	}
/**/	if( v_p1.reflect !== 'Point' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_p1end === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute p1end'
/**/		);
/**/	}
/**/
/**/	if( v_p1end !== null )
/**/	{
/**/		if(
/**/			typeof( v_p1end ) !== 'string'
/**/			&&
/**/			!( v_p1end instanceof String )
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_p2 === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute p2'
/**/		);
/**/	}
/**/
/**/	if( v_p2 === null )
/**/	{
/**/		throw new Error(
/**/			'p2 must not be null'
/**/		);
/**/	}
/**/	if( v_p2.reflect !== 'Point' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_p2end === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute p2end'
/**/		);
/**/	}
/**/
/**/	if( v_p2end !== null )
/**/	{
/**/		if(
/**/			typeof( v_p2end ) !== 'string'
/**/			&&
/**/			!( v_p2end instanceof String )
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/}

	if(
		inherit
		&&
		v_p1.equals( inherit.p1 )
		&&
		v_p1end === inherit.p1end
		&&
		v_p2.equals( inherit.p2 )
		&&
		v_p2end === inherit.p2end
	)
	{
		return inherit;
	}

	return (
		new Line(
			_tag,
			v_p1,
			v_p1end,
			v_p2,
			v_p2end
		)
	);
};


/*
| Reflection.
*/
Line.prototype.reflect =
	'Line';


/*
| Sets values by path.
*/
Line.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Line.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
Line.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.p1.equals( obj.p1 )
		&&
		this.p1end === obj.p1end
		&&
		this.p2.equals( obj.p2 )
		&&
		this.p2end === obj.p2end
	);
};


} )( );
