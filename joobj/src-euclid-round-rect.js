/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Euclid =
		Euclid || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		59738402;


/*
| Constructor.
*/
var RoundRect =
Euclid.RoundRect =
	function(
		tag,
		v_a,   // horizontal rounding
		v_b,   // vertical rounding
		v_pnw, // point in north west
		v_pse  // point in south east
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.a =
		v_a;

	this.b =
		v_b;

	this.pnw =
		v_pnw;

	this.pse =
		v_pse;

	this._init(
		v_pnw,
		v_pse,
		v_a,
		v_b
	);

	Jools.immute( this );
};


/*
| Creates a new RoundRect object.
*/
RoundRect.create =
RoundRect.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_a,
		v_b,
		v_pnw,
		v_pse;

	if( this !== RoundRect )
	{
		inherit =
			this;

		v_a =
			this.a;

		v_b =
			this.b;

		v_pnw =
			this.pnw;

		v_pse =
			this.pse;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'a' :

				if( arg !== undefined )
				{
					v_a =
						arg;
				}

				break;

			case 'b' :

				if( arg !== undefined )
				{
					v_b =
						arg;
				}

				break;

			case 'pnw' :

				if( arg !== undefined )
				{
					v_pnw =
						arg;
				}

				break;

			case 'pse' :

				if( arg !== undefined )
				{
					v_pse =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_a === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute a'
/**/		);
/**/	}
/**/
/**/	if( v_a === null )
/**/	{
/**/		throw new Error(
/**/			'a must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_a ) !== 'number'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_b === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute b'
/**/		);
/**/	}
/**/
/**/	if( v_b === null )
/**/	{
/**/		throw new Error(
/**/			'b must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_b ) !== 'number'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_pnw === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute pnw'
/**/		);
/**/	}
/**/
/**/	if( v_pnw === null )
/**/	{
/**/		throw new Error(
/**/			'pnw must not be null'
/**/		);
/**/	}
/**/	if( v_pnw.reflect !== 'Point' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_pse === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute pse'
/**/		);
/**/	}
/**/
/**/	if( v_pse === null )
/**/	{
/**/		throw new Error(
/**/			'pse must not be null'
/**/		);
/**/	}
/**/	if( v_pse.reflect !== 'Point' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		v_a === inherit.a
		&&
		v_b === inherit.b
		&&
		v_pnw.equals( inherit.pnw )
		&&
		v_pse.equals( inherit.pse )
	)
	{
		return inherit;
	}

	return (
		new RoundRect(
			_tag,
			v_a,
			v_b,
			v_pnw,
			v_pse
		)
	);
};


/*
| Reflection.
*/
RoundRect.prototype.reflect =
	'RoundRect';


/*
| Sets values by path.
*/
RoundRect.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
RoundRect.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
RoundRect.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.a === obj.a
		&&
		this.b === obj.b
		&&
		this.pnw.equals( obj.pnw )
		&&
		this.pse.equals( obj.pse )
	);
};


} )( );
