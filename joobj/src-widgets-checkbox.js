/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Widgets =
		Widgets || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		538330277;


/*
| Constructor.
*/
var CheckBox =
Widgets.CheckBox =
	function(
		tag,
		v_checked,     // true if the checkbox is checked
		v_designFrame, // designed frame (using anchors
		v_focusAccent, // true if the widget got focus
		v_hover,       // component hovered upon
		v_path,        // the path of the widget
		v_style,       // name of the style used
		v_superFrame,  // the frame the widget resides in
		v_visible      // if false the button is hidden
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.checked =
		v_checked;

	this.designFrame =
		v_designFrame;

	this.focusAccent =
		v_focusAccent;

	this.hover =
		v_hover;

	this.path =
		v_path;

	this.style =
		v_style;

	this.superFrame =
		v_superFrame;

	this.visible =
		v_visible;

	this._init( );

	Jools.immute( this );
};


Jools.subclass(
	CheckBox,
	Widgets.Widget
);


/*
| Creates a new CheckBox object.
*/
CheckBox.create =
CheckBox.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_checked,
		v_designFrame,
		v_focusAccent,
		v_hover,
		v_mark,
		v_path,
		v_style,
		v_superFrame,
		v_visible;

	if( this !== CheckBox )
	{
		inherit =
			this;

		v_checked =
			this.checked;

		v_designFrame =
			this.designFrame;

		v_focusAccent =
			this.focusAccent;

		v_hover =
			this.hover;

		v_path =
			this.path;

		v_style =
			this.style;

		v_superFrame =
			this.superFrame;

		v_visible =
			this.visible;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'checked' :

				if( arg !== undefined )
				{
					v_checked =
						arg;
				}

				break;

			case 'designFrame' :

				if( arg !== undefined )
				{
					v_designFrame =
						arg;
				}

				break;

			case 'focusAccent' :

				if( arg !== undefined )
				{
					v_focusAccent =
						arg;
				}

				break;

			case 'hover' :

				if( arg !== undefined )
				{
					v_hover =
						arg;
				}

				break;

			case 'mark' :

				if( arg !== undefined )
				{
					v_mark =
						arg;
				}

				break;

			case 'path' :

				if( arg !== undefined )
				{
					v_path =
						arg;
				}

				break;

			case 'style' :

				if( arg !== undefined )
				{
					v_style =
						arg;
				}

				break;

			case 'superFrame' :

				if( arg !== undefined )
				{
					v_superFrame =
						arg;
				}

				break;

			case 'visible' :

				if( arg !== undefined )
				{
					v_visible =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

	if( v_checked === undefined )
	{
		v_checked =
			false;
	}

	if( v_focusAccent === undefined )
	{
		v_focusAccent =
			false;
	}

	if( v_hover === undefined )
	{
		v_hover =
			null;
	}

	if( v_mark === undefined )
	{
		v_mark =
			null;
	}

	if( v_path === undefined )
	{
		v_path =
			null;
	}

	if( v_superFrame === undefined )
	{
		v_superFrame =
			null;
	}

	if( v_visible === undefined )
	{
		v_visible =
			true;
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_checked === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute checked'
/**/		);
/**/	}
/**/
/**/	if( v_checked === null )
/**/	{
/**/		throw new Error(
/**/			'checked must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_checked ) !== 'boolean'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_designFrame === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute designFrame'
/**/		);
/**/	}
/**/
/**/	if( v_designFrame === null )
/**/	{
/**/		throw new Error(
/**/			'designFrame must not be null'
/**/		);
/**/	}
/**/	if( v_designFrame.reflect !== 'AnchorRect' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_focusAccent === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute focusAccent'
/**/		);
/**/	}
/**/
/**/	if( v_focusAccent === null )
/**/	{
/**/		throw new Error(
/**/			'focusAccent must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_focusAccent ) !== 'boolean'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_hover === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute hover'
/**/		);
/**/	}
/**/
/**/	if( v_hover !== null )
/**/	{
/**/		if( v_hover.reflect !== 'Path' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_mark === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute mark'
/**/		);
/**/	}
/**/
/**/	if( v_path === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute path'
/**/		);
/**/	}
/**/
/**/	if( v_path !== null )
/**/	{
/**/		if( v_path.reflect !== 'Path' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_style === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute style'
/**/		);
/**/	}
/**/
/**/	if( v_style === null )
/**/	{
/**/		throw new Error(
/**/			'style must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_style ) !== 'string'
/**/		&&
/**/		!( v_style instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_superFrame === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute superFrame'
/**/		);
/**/	}
/**/
/**/	if( v_superFrame !== null )
/**/	{
/**/		if( v_superFrame.reflect !== 'Rect' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_visible === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute visible'
/**/		);
/**/	}
/**/
/**/	if( v_visible === null )
/**/	{
/**/		throw new Error(
/**/			'visible must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_visible ) !== 'boolean'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}
	v_hover =
		Widgets.Widget.concernsHover(
			v_hover,
			v_path
		);


	if(
		inherit
		&&
		v_checked === inherit.checked
		&&
		v_designFrame.equals( inherit.designFrame )
		&&
		v_focusAccent === inherit.focusAccent
		&&
		(
			v_hover === inherit.hover
			||
			(
				v_hover
				&&
				v_hover.equals( inherit.hover )
			)
		)
		&&
		v_mark === null
		&&
		(
			v_path === inherit.path
			||
			(
				v_path
				&&
				v_path.equals( inherit.path )
			)
		)
		&&
		v_style === inherit.style
		&&
		(
			v_superFrame === inherit.superFrame
			||
			(
				v_superFrame
				&&
				v_superFrame.equals( inherit.superFrame )
			)
		)
		&&
		v_visible === inherit.visible
	)
	{
		return inherit;
	}

	return (
		new CheckBox(
			_tag,
			v_checked,
			v_designFrame,
			v_focusAccent,
			v_hover,
			v_path,
			v_style,
			v_superFrame,
			v_visible
		)
	);
};


/*
| Reflection.
*/
CheckBox.prototype.reflect =
	'CheckBox';


/*
| Sets values by path.
*/
CheckBox.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
CheckBox.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
CheckBox.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.checked === obj.checked
		&&
		this.designFrame.equals( obj.designFrame )
		&&
		this.focusAccent === obj.focusAccent
		&&
		(
			this.hover === obj.hover ||
			(
				this.hover !== null
				&&
				this.hover.equals( obj.hover )
			)
		)
		&&
		(
			this.path === obj.path ||
			(
				this.path !== null
				&&
				this.path.equals( obj.path )
			)
		)
		&&
		this.style === obj.style
		&&
		(
			this.superFrame === obj.superFrame ||
			(
				this.superFrame !== null
				&&
				this.superFrame.equals( obj.superFrame )
			)
		)
		&&
		this.visible === obj.visible
	);
};


} )( );
