/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Design =
		Design || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		661923559;


/*
| Constructor.
*/
var AnchorPoint =
Design.AnchorPoint =
	function(
		tag,
		v_anchor, // compass of the anchor
		v_x,      // x-distance
		v_y       // y-distance
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.anchor =
		v_anchor;

	this.x =
		v_x;

	this.y =
		v_y;

	Jools.immute( this );
};


/*
| Creates a new AnchorPoint object.
*/
AnchorPoint.create =
AnchorPoint.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_anchor,
		v_x,
		v_y;

	if( this !== AnchorPoint )
	{
		inherit =
			this;

		v_anchor =
			this.anchor;

		v_x =
			this.x;

		v_y =
			this.y;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'anchor' :

				if( arg !== undefined )
				{
					v_anchor =
						arg;
				}

				break;

			case 'x' :

				if( arg !== undefined )
				{
					v_x =
						arg;
				}

				break;

			case 'y' :

				if( arg !== undefined )
				{
					v_y =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_anchor === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute anchor'
/**/		);
/**/	}
/**/
/**/	if( v_anchor === null )
/**/	{
/**/		throw new Error(
/**/			'anchor must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_anchor ) !== 'string'
/**/		&&
/**/		!( v_anchor instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_x === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute x'
/**/		);
/**/	}
/**/
/**/	if( v_x === null )
/**/	{
/**/		throw new Error(
/**/			'x must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_x ) !== 'number'
/**/		||
/**/		Math.floor( v_x ) !== v_x
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_y === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute y'
/**/		);
/**/	}
/**/
/**/	if( v_y === null )
/**/	{
/**/		throw new Error(
/**/			'y must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_y ) !== 'number'
/**/		||
/**/		Math.floor( v_y ) !== v_y
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		v_anchor === inherit.anchor
		&&
		v_x === inherit.x
		&&
		v_y === inherit.y
	)
	{
		return inherit;
	}

	return (
		new AnchorPoint(
			_tag,
			v_anchor,
			v_x,
			v_y
		)
	);
};


/*
| Reflection.
*/
AnchorPoint.prototype.reflect =
	'AnchorPoint';


/*
| Sets values by path.
*/
AnchorPoint.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
AnchorPoint.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
AnchorPoint.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.anchor === obj.anchor
		&&
		this.x === obj.x
		&&
		this.y === obj.y
	);
};


} )( );
