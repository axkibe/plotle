/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Visual =
		Visual || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		278811308;


/*
| Node includes
*/
if( SERVER )
{
	JoobjProto =
		require( '../src/joobj/proto' );

	Jools =
		require( '../src/jools/jools' );
}


/*
| Constructor.
*/
var Para =
Visual.Para =
	function(
		tag,
		inherit,     // inheritance
		v_flowWidth, // width of the para its flow
		v_fontsize,  // size of the font
		v_mark,      // the users mark
		v_path,      // the path of the para
		v_text,      // the paragraphs text
		v_view       // the current view
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	if( v_flowWidth !== undefined )
	{
		this.flowWidth =
			v_flowWidth;
	}

	if( v_fontsize !== undefined )
	{
		this.fontsize =
			v_fontsize;
	}

	if( v_mark !== undefined )
	{
		this.mark =
			v_mark;
	}

	if( v_path !== undefined )
	{
		this.path =
			v_path;
	}

	this.text =
		v_text;

	if( v_view !== undefined )
	{
		this.view =
			v_view;
	}

	this._init(
		inherit
	);

	Jools.immute( this );
};


/*
| Creates a new Para object.
*/
Para.create =
Para.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_flowWidth,
		v_fontsize,
		v_mark,
		v_path,
		v_text,
		v_view;

	if( this !== Para )
	{
		inherit =
			this;

		v_flowWidth =
			this.flowWidth;

		v_fontsize =
			this.fontsize;

		v_mark =
			this.mark;

		v_path =
			this.path;

		v_text =
			this.text;

		v_view =
			this.view;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'flowWidth' :

				if( arg !== undefined )
				{
					v_flowWidth =
						arg;
				}

				break;

			case 'fontsize' :

				if( arg !== undefined )
				{
					v_fontsize =
						arg;
				}

				break;

			case 'mark' :

				if( arg !== undefined )
				{
					v_mark =
						arg;
				}

				break;

			case 'path' :

				if( arg !== undefined )
				{
					v_path =
						arg;
				}

				break;

			case 'text' :

				if( arg !== undefined )
				{
					v_text =
						arg;
				}

				break;

			case 'view' :

				if( arg !== undefined )
				{
					v_view =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

	if( v_flowWidth === undefined )
	{
		v_flowWidth =
			undefined;
	}

	if( v_fontsize === undefined )
	{
		v_fontsize =
			undefined;
	}

	if( v_mark === undefined )
	{
		v_mark =
			undefined;
	}

	if( v_path === undefined )
	{
		v_path =
			undefined;
	}

	if( v_text === undefined )
	{
		v_text =
			null;
	}

	if( v_view === undefined )
	{
		v_view =
			undefined;
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_flowWidth === null )
/**/	{
/**/		throw new Error(
/**/			'flowWidth must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_flowWidth !== undefined )
/**/	{
/**/		if(
/**/			typeof( v_flowWidth ) !== 'number'
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_fontsize === null )
/**/	{
/**/		throw new Error(
/**/			'fontsize must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_fontsize !== undefined )
/**/	{
/**/		if(
/**/			typeof( v_fontsize ) !== 'number'
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_mark === null )
/**/	{
/**/		throw new Error(
/**/			'mark must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_path === null )
/**/	{
/**/		throw new Error(
/**/			'path must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_path !== undefined )
/**/	{
/**/		if( v_path.reflect !== 'Path' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_text === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute text'
/**/		);
/**/	}
/**/
/**/	if( v_text !== null )
/**/	{
/**/		if(
/**/			typeof( v_text ) !== 'string'
/**/			&&
/**/			!( v_text instanceof String )
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_view === null )
/**/	{
/**/		throw new Error(
/**/			'view must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_view !== undefined )
/**/	{
/**/		if( v_view.reflect !== 'View' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/}
	v_mark =
		Para.concernsMark(
			v_mark,
			v_path
		);


	if(
		inherit
		&&
		v_flowWidth === inherit.flowWidth
		&&
		v_fontsize === inherit.fontsize
		&&
		v_mark === inherit.mark
		&&
		(
			v_path === inherit.path
			||
			(
				v_path
				&&
				v_path.equals( inherit.path )
			)
		)
		&&
		v_text === inherit.text
		&&
		(
			v_view === inherit.view
			||
			(
				v_view
				&&
				v_view.equals( inherit.view )
			)
		)
	)
	{
		return inherit;
	}

	return (
		new Para(
			_tag,
			inherit,
			v_flowWidth,
			v_fontsize,
			v_mark,
			v_path,
			v_text,
			v_view
		)
	);
};


/*
| Creates a new Para object from JSON
*/
Para.createFromJSON =
	function(
		json // the json object
	)
{
	if( json._$grown ) return json;

	var
		v_flowWidth,
		v_fontsize,
		v_mark,
		v_path,
		v_text,
		v_view;

	for( var aName in json )
	{
		var
			arg =
				json[ aName ];

		switch( aName )
		{
			case 'type' :

				if( arg !== 'Para')
				{
					throw new Error(
						'invalid JSON'
					);
				}

				break;

			case 'text' :

				v_text =
					arg;

				break;

			default :

				throw new Error(
					'invalid JSON: ' + aName
				);
		}
	}


	if( v_text === undefined )
	{
		v_text =
			null;
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_text === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute text'
/**/		);
/**/	}
/**/
/**/	if( v_text !== null )
/**/	{
/**/		if(
/**/			typeof( v_text ) !== 'string'
/**/			&&
/**/			!( v_text instanceof String )
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/}
	return (
		new Para(
			_tag,
			null,
			v_flowWidth,
			v_fontsize,
			v_mark,
			v_path,
			v_text,
			v_view
		)
	);
};


/*
| Reflection.
*/
Para.prototype.reflect =
	'Para';


/*
| Workaround meshverse growing
*/
Para.prototype._$grown =
	true;


/*
| Sets values by path.
*/
Para.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Para.prototype.getPath =
	JoobjProto.getPath;


/*
| Convers the object into a JSON.
*/
Jools.lazyValue(
	Para.prototype,
	'toJSON',
	function( )
	{
		var
			json;

		json =
			Object.freeze( {
				type :
					'Para',
				'text' :
					this.text
		} );

		return function( ) { return json; };
	}
);


/*
| Checks for equal objects.
*/
Para.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.flowWidth === obj.flowWidth
		&&
		this.fontsize === obj.fontsize
		&&
		this.mark === obj.mark
		&&
		this.path.equals( obj.path )
		&&
		this.text === obj.text
		&&
		this.view.equals( obj.view )
	);
};


/*
| Node export
*/
if( SERVER )
{
	module.exports =
		Para;
}


} )( );
