/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Discs =
		Discs || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		403673050;


/*
| Constructor.
*/
var Jockey =
Discs.Jockey =
	function(
		tag,
		ranks,       // twig order, set upon change
		twig,        // twig, set upon change
		v_access,    // users access to current space
		v_action,    // currently active action
		v_hover,     // the widget hovered upon
		v_mark,      // the users mark
		v_mode,      // current mode the UI is in
		v_path,      // path of the disc
		v_spaceTag,  // name of currently loaded space
		v_spaceUser, // owner of currently loaded space
		v_username,  // currently logged in user
		v_view       // the current view
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.access =
		v_access;

	this.action =
		v_action;

	this.hover =
		v_hover;

	this.mark =
		v_mark;

	this.mode =
		v_mode;

	this.path =
		v_path;

	this.spaceTag =
		v_spaceTag;

	this.spaceUser =
		v_spaceUser;

	this.username =
		v_username;

	this.view =
		v_view;

	this.twig =
		twig;

	this.ranks =
		ranks;

	this._init( );

	Jools.immute( this );
Jools.immute( ranks );
Jools.immute( twig );
};


Jools.subclass(
	Jockey,
	Discs.Disc
);


/*
| Creates a new Jockey object.
*/
Jockey.create =
Jockey.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		key,
		ranks,
		twig,
		twigdup,
		v_access,
		v_action,
		v_hover,
		v_mark,
		v_mode,
		v_path,
		v_spaceTag,
		v_spaceUser,
		v_username,
		v_view;

	if( this !== Jockey )
	{
		inherit =
			this;

		twig =
			inherit.twig;

		ranks =
			inherit.ranks;

		twigdup =
			false;

		v_access =
			this.access;

		v_action =
			this.action;

		v_hover =
			this.hover;

		v_mark =
			this.mark;

		v_mode =
			this.mode;

		v_path =
			this.path;

		v_spaceTag =
			this.spaceTag;

		v_spaceUser =
			this.spaceUser;

		v_username =
			this.username;

		v_view =
			this.view;
	}
	else
	{
		twig =
			{ };

		ranks =
			[ ];

		twigdup =
			true;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'access' :

				if( arg !== undefined )
				{
					v_access =
						arg;
				}

				break;

			case 'action' :

				if( arg !== undefined )
				{
					v_action =
						arg;
				}

				break;

			case 'hover' :

				if( arg !== undefined )
				{
					v_hover =
						arg;
				}

				break;

			case 'mark' :

				if( arg !== undefined )
				{
					v_mark =
						arg;
				}

				break;

			case 'mode' :

				if( arg !== undefined )
				{
					v_mode =
						arg;
				}

				break;

			case 'path' :

				if( arg !== undefined )
				{
					v_path =
						arg;
				}

				break;

			case 'spaceTag' :

				if( arg !== undefined )
				{
					v_spaceTag =
						arg;
				}

				break;

			case 'spaceUser' :

				if( arg !== undefined )
				{
					v_spaceUser =
						arg;
				}

				break;

			case 'username' :

				if( arg !== undefined )
				{
					v_username =
						arg;
				}

				break;

			case 'view' :

				if( arg !== undefined )
				{
					v_view =
						arg;
				}

				break;

			case 'twig:add' :

				if( !twigdup )
				{
					twig =
						Jools.copy( twig );

					ranks =
						ranks.slice( );

					twigdup =
						true;
				}

				key =
					arg;

				arg =
					arguments[ ++a + 1 ];

				if( twig[ key ] !== undefined )
				{
					throw new Error(
						'key "' + key + '" already in use'
					);
				}

				twig[ key ] =
					arg;

				ranks.push( key );

				break;

			case 'twig:set' :

				if( !twigdup )
				{
					twig =
						Jools.copy( twig );

					ranks =
						ranks.slice( );

					twigdup =
						true;
				}

				key =
					arg;

				arg =
					arguments[ ++a + 1 ];

				if( twig[ key ] === undefined )
				{
					throw new Error(
						'key "' + key + '" not in use'
					);
				}

				twig[ key ] =
					arg;

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

	if( v_spaceTag === undefined )
	{
		v_spaceTag =
			null;
	}

	if( v_spaceUser === undefined )
	{
		v_spaceUser =
			null;
	}

	if( v_username === undefined )
	{
		v_username =
			null;
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_access === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute access'
/**/		);
/**/	}
/**/
/**/	if( v_access === null )
/**/	{
/**/		throw new Error(
/**/			'access must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_access ) !== 'string'
/**/		&&
/**/		!( v_access instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_action === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute action'
/**/		);
/**/	}
/**/
/**/	if( v_action === null )
/**/	{
/**/		throw new Error(
/**/			'action must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_hover === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute hover'
/**/		);
/**/	}
/**/
/**/	if( v_hover === null )
/**/	{
/**/		throw new Error(
/**/			'hover must not be null'
/**/		);
/**/	}
/**/	if( v_hover.reflect !== 'Path' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_mark === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute mark'
/**/		);
/**/	}
/**/
/**/	if( v_mark === null )
/**/	{
/**/		throw new Error(
/**/			'mark must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_mode === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute mode'
/**/		);
/**/	}
/**/
/**/	if( v_mode === null )
/**/	{
/**/		throw new Error(
/**/			'mode must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_mode ) !== 'string'
/**/		&&
/**/		!( v_mode instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_path === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute path'
/**/		);
/**/	}
/**/
/**/	if( v_path === null )
/**/	{
/**/		throw new Error(
/**/			'path must not be null'
/**/		);
/**/	}
/**/	if( v_path.reflect !== 'Path' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_spaceTag === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute spaceTag'
/**/		);
/**/	}
/**/
/**/	if( v_spaceTag !== null )
/**/	{
/**/		if(
/**/			typeof( v_spaceTag ) !== 'string'
/**/			&&
/**/			!( v_spaceTag instanceof String )
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_spaceUser === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute spaceUser'
/**/		);
/**/	}
/**/
/**/	if( v_spaceUser !== null )
/**/	{
/**/		if(
/**/			typeof( v_spaceUser ) !== 'string'
/**/			&&
/**/			!( v_spaceUser instanceof String )
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_username === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute username'
/**/		);
/**/	}
/**/
/**/	if( v_username !== null )
/**/	{
/**/		if(
/**/			typeof( v_username ) !== 'string'
/**/			&&
/**/			!( v_username instanceof String )
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_view === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute view'
/**/		);
/**/	}
/**/
/**/	if( v_view === null )
/**/	{
/**/		throw new Error(
/**/			'view must not be null'
/**/		);
/**/	}
/**/	if( v_view.reflect !== 'View' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}
	v_mark =
		Discs.Jockey.concernsMark(
			v_mark
		);


	if(
		inherit
		&&
		!twigdup
		&&
		v_access === inherit.access
		&&
		v_action.equals( inherit.action )
		&&
		v_hover.equals( inherit.hover )
		&&
		v_mark === inherit.mark
		&&
		v_mode === inherit.mode
		&&
		v_path.equals( inherit.path )
		&&
		v_spaceTag === inherit.spaceTag
		&&
		v_spaceUser === inherit.spaceUser
		&&
		v_username === inherit.username
		&&
		v_view.equals( inherit.view )
	)
	{
		return inherit;
	}

	return (
		new Jockey(
			_tag,
			ranks,
			twig,
			v_access,
			v_action,
			v_hover,
			v_mark,
			v_mode,
			v_path,
			v_spaceTag,
			v_spaceUser,
			v_username,
			v_view
		)
	);
};


/*
| Reflection.
*/
Jockey.prototype.reflect =
	'Jockey';


/*
| Sets values by path.
*/
Jockey.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Jockey.prototype.getPath =
	JoobjProto.getPath;


/*
| .
*/
Jockey.prototype.atRank =
	JoobjProto.atRank;


/*
| Checks for equal objects.
*/
Jockey.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.twig === obj.twig
		&&
		this.access === obj.access
		&&
		this.action.equals( obj.action )
		&&
		this.hover.equals( obj.hover )
		&&
		this.mark === obj.mark
		&&
		this.mode === obj.mode
		&&
		this.path.equals( obj.path )
		&&
		this.spaceTag === obj.spaceTag
		&&
		this.spaceUser === obj.spaceUser
		&&
		this.username === obj.username
		&&
		this.view.equals( obj.view )
	);
};


} )( );
