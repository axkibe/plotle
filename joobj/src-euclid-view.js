/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Euclid =
		Euclid || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		925642071;


/*
| Constructor.
*/
var View =
Euclid.View =
	function(
		tag,
		v_fact,   // zooming factor of view
		v_height, // current height of screen
		v_pan,    // point in north west (equals panning)
		v_width   // current width of screen
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.fact =
		v_fact;

	this.height =
		v_height;

	this.pan =
		v_pan;

	this.width =
		v_width;

	this._init( );

	Jools.immute( this );
};


/*
| Creates a new View object.
*/
View.create =
View.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_fact,
		v_height,
		v_pan,
		v_width;

	if( this !== View )
	{
		inherit =
			this;

		v_fact =
			this.fact;

		v_height =
			this.height;

		v_pan =
			this.pan;

		v_width =
			this.width;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'fact' :

				if( arg !== undefined )
				{
					v_fact =
						arg;
				}

				break;

			case 'height' :

				if( arg !== undefined )
				{
					v_height =
						arg;
				}

				break;

			case 'pan' :

				if( arg !== undefined )
				{
					v_pan =
						arg;
				}

				break;

			case 'width' :

				if( arg !== undefined )
				{
					v_width =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_fact === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute fact'
/**/		);
/**/	}
/**/
/**/	if( v_fact === null )
/**/	{
/**/		throw new Error(
/**/			'fact must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_fact ) !== 'number'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_height === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute height'
/**/		);
/**/	}
/**/
/**/	if( v_height === null )
/**/	{
/**/		throw new Error(
/**/			'height must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_height ) !== 'number'
/**/		||
/**/		Math.floor( v_height ) !== v_height
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_pan === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute pan'
/**/		);
/**/	}
/**/
/**/	if( v_pan === null )
/**/	{
/**/		throw new Error(
/**/			'pan must not be null'
/**/		);
/**/	}
/**/	if( v_pan.reflect !== 'Point' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_width === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute width'
/**/		);
/**/	}
/**/
/**/	if( v_width === null )
/**/	{
/**/		throw new Error(
/**/			'width must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_width ) !== 'number'
/**/		||
/**/		Math.floor( v_width ) !== v_width
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		v_fact === inherit.fact
		&&
		v_height === inherit.height
		&&
		v_pan.equals( inherit.pan )
		&&
		v_width === inherit.width
	)
	{
		return inherit;
	}

	return (
		new View(
			_tag,
			v_fact,
			v_height,
			v_pan,
			v_width
		)
	);
};


/*
| Reflection.
*/
View.prototype.reflect =
	'View';


/*
| Sets values by path.
*/
View.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
View.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
View.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.fact === obj.fact
		&&
		this.height === obj.height
		&&
		this.pan.equals( obj.pan )
		&&
		this.width === obj.width
	);
};


} )( );
