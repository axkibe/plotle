/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Code =
		Code || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		628309902;


/*
| Node includes
*/
if( SERVER )
{
	JoobjProto =
		require( '../src/joobj/proto' );

	Jools =
		require( '../src/jools/jools' );
}


/*
| Constructor.
*/
var File =
Code.File =
	function(
		tag,
		v_capsule, // the capsule
		v_header   // header comment
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.capsule =
		v_capsule;

	this.header =
		v_header;

	Jools.immute( this );
};


/*
| Creates a new File object.
*/
File.create =
File.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_capsule,
		v_header;

	if( this !== File )
	{
		inherit =
			this;

		v_capsule =
			this.capsule;

		v_header =
			this.header;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'capsule' :

				if( arg !== undefined )
				{
					v_capsule =
						arg;
				}

				break;

			case 'header' :

				if( arg !== undefined )
				{
					v_header =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

	if( v_capsule === undefined )
	{
		v_capsule =
			null;
	}

	if( v_header === undefined )
	{
		v_header =
			null;
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_capsule === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute capsule'
/**/		);
/**/	}
/**/
/**/	if( v_capsule !== null )
/**/	{
/**/		if( v_capsule.reflect !== 'Block' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_header === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute header'
/**/		);
/**/	}
/**/
/**/	if( v_header !== null )
/**/	{
/**/		if( v_header.reflect !== 'Comment' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/}

	if(
		inherit
		&&
		(
			v_capsule === inherit.capsule
			||
			(
				v_capsule
				&&
				v_capsule.equals( inherit.capsule )
			)
		)
		&&
		(
			v_header === inherit.header
			||
			(
				v_header
				&&
				v_header.equals( inherit.header )
			)
		)
	)
	{
		return inherit;
	}

	return (
		new File(
			_tag,
			v_capsule,
			v_header
		)
	);
};


/*
| Reflection.
*/
File.prototype.reflect =
	'File';


/*
| Sets values by path.
*/
File.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
File.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
File.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		(
			this.capsule === obj.capsule ||
			(
				this.capsule !== null
				&&
				this.capsule.equals( obj.capsule )
			)
		)
		&&
		(
			this.header === obj.header ||
			(
				this.header !== null
				&&
				this.header.equals( obj.header )
			)
		)
	);
};


/*
| Node export
*/
if( SERVER )
{
	module.exports =
		File;
}


} )( );
