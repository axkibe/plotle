/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Visual =
		Visual || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		399466505;


/*
| Constructor.
*/
var Scrollbar =
Visual.Scrollbar =
	function(
		tag,
		v_aperture, // the size of the bar
		v_max,      // maximum position
		v_pnw,      // point in north west
		v_pos,      // position of the scrollbar
		v_size      // size
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.aperture =
		v_aperture;

	this.max =
		v_max;

	this.pnw =
		v_pnw;

	this.pos =
		v_pos;

	this.size =
		v_size;

	this._init( );

	Jools.immute( this );
};


/*
| Creates a new Scrollbar object.
*/
Scrollbar.create =
Scrollbar.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_aperture,
		v_max,
		v_pnw,
		v_pos,
		v_size;

	if( this !== Scrollbar )
	{
		inherit =
			this;

		v_aperture =
			this.aperture;

		v_max =
			this.max;

		v_pnw =
			this.pnw;

		v_pos =
			this.pos;

		v_size =
			this.size;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'aperture' :

				if( arg !== undefined )
				{
					v_aperture =
						arg;
				}

				break;

			case 'max' :

				if( arg !== undefined )
				{
					v_max =
						arg;
				}

				break;

			case 'pnw' :

				if( arg !== undefined )
				{
					v_pnw =
						arg;
				}

				break;

			case 'pos' :

				if( arg !== undefined )
				{
					v_pos =
						arg;
				}

				break;

			case 'size' :

				if( arg !== undefined )
				{
					v_size =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_aperture === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute aperture'
/**/		);
/**/	}
/**/
/**/	if( v_aperture === null )
/**/	{
/**/		throw new Error(
/**/			'aperture must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_aperture ) !== 'number'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_max === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute max'
/**/		);
/**/	}
/**/
/**/	if( v_max === null )
/**/	{
/**/		throw new Error(
/**/			'max must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_max ) !== 'number'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_pnw === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute pnw'
/**/		);
/**/	}
/**/
/**/	if( v_pnw === null )
/**/	{
/**/		throw new Error(
/**/			'pnw must not be null'
/**/		);
/**/	}
/**/	if( v_pnw.reflect !== 'Point' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_pos === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute pos'
/**/		);
/**/	}
/**/
/**/	if( v_pos === null )
/**/	{
/**/		throw new Error(
/**/			'pos must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_pos ) !== 'number'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_size === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute size'
/**/		);
/**/	}
/**/
/**/	if( v_size === null )
/**/	{
/**/		throw new Error(
/**/			'size must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_size ) !== 'number'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		v_aperture === inherit.aperture
		&&
		v_max === inherit.max
		&&
		v_pnw.equals( inherit.pnw )
		&&
		v_pos === inherit.pos
		&&
		v_size === inherit.size
	)
	{
		return inherit;
	}

	return (
		new Scrollbar(
			_tag,
			v_aperture,
			v_max,
			v_pnw,
			v_pos,
			v_size
		)
	);
};


/*
| Reflection.
*/
Scrollbar.prototype.reflect =
	'Scrollbar';


/*
| Sets values by path.
*/
Scrollbar.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Scrollbar.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
Scrollbar.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.aperture === obj.aperture
		&&
		this.max === obj.max
		&&
		this.pnw.equals( obj.pnw )
		&&
		this.pos === obj.pos
		&&
		this.size === obj.size
	);
};


} )( );
