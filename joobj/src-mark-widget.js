/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Mark =
		Mark || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		910496755;


/*
| Constructor.
*/
var Widget =
Mark.Widget =
	function(
		tag,
		v_path  // path of the item
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.path =
		v_path;

	Jools.immute( this );
};


Jools.subclass(
	Widget,
	Mark.Mark
);


/*
| Creates a new Widget object.
*/
Widget.create =
Widget.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_path;

	if( this !== Widget )
	{
		inherit =
			this;

		v_path =
			this.path;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'path' :

				if( arg !== undefined )
				{
					v_path =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_path === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute path'
/**/		);
/**/	}
/**/
/**/	if( v_path === null )
/**/	{
/**/		throw new Error(
/**/			'path must not be null'
/**/		);
/**/	}
/**/	if( v_path.reflect !== 'Path' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		v_path.equals( inherit.path )
	)
	{
		return inherit;
	}

	return (
		new Widget(
			_tag,
			v_path
		)
	);
};


/*
| Reflection.
*/
Widget.prototype.reflect =
	'Widget';


/*
| Sets values by path.
*/
Widget.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Widget.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
Widget.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.path.equals( obj.path )
	);
};


} )( );
