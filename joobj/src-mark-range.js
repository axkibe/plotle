/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Mark =
		Mark || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		12864241;


/*
| Constructor.
*/
var Range =
Mark.Range =
	function(
		tag,
		v_bAt,     // offset of the begin of the range
		v_bPath,   // path of the begin of the range
		v_docTree, // the document tree the range belongs to
		v_eAt,     // offset of the end of the range
		v_ePath,   // path of the end of the range
		v_retainx  // x-position of the caret kept
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.bAt =
		v_bAt;

	this.bPath =
		v_bPath;

	this.docTree =
		v_docTree;

	this.eAt =
		v_eAt;

	this.ePath =
		v_ePath;

	this.retainx =
		v_retainx;

	Jools.immute( this );
};


Jools.subclass(
	Range,
	Mark.Mark
);


/*
| Creates a new Range object.
*/
Range.create =
Range.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_bAt,
		v_bPath,
		v_docTree,
		v_eAt,
		v_ePath,
		v_retainx;

	if( this !== Range )
	{
		inherit =
			this;

		v_bAt =
			this.bAt;

		v_bPath =
			this.bPath;

		v_docTree =
			this.docTree;

		v_eAt =
			this.eAt;

		v_ePath =
			this.ePath;

		v_retainx =
			this.retainx;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'bAt' :

				if( arg !== undefined )
				{
					v_bAt =
						arg;
				}

				break;

			case 'bPath' :

				if( arg !== undefined )
				{
					v_bPath =
						arg;
				}

				break;

			case 'docTree' :

				if( arg !== undefined )
				{
					v_docTree =
						arg;
				}

				break;

			case 'eAt' :

				if( arg !== undefined )
				{
					v_eAt =
						arg;
				}

				break;

			case 'ePath' :

				if( arg !== undefined )
				{
					v_ePath =
						arg;
				}

				break;

			case 'retainx' :

				if( arg !== undefined )
				{
					v_retainx =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

	if( v_retainx === undefined )
	{
		v_retainx =
			null;
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_bAt === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute bAt'
/**/		);
/**/	}
/**/
/**/	if( v_bAt === null )
/**/	{
/**/		throw new Error(
/**/			'bAt must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_bAt ) !== 'number'
/**/		||
/**/		Math.floor( v_bAt ) !== v_bAt
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_bPath === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute bPath'
/**/		);
/**/	}
/**/
/**/	if( v_bPath === null )
/**/	{
/**/		throw new Error(
/**/			'bPath must not be null'
/**/		);
/**/	}
/**/	if( v_bPath.reflect !== 'Path' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_docTree === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute docTree'
/**/		);
/**/	}
/**/
/**/	if( v_docTree === null )
/**/	{
/**/		throw new Error(
/**/			'docTree must not be null'
/**/		);
/**/	}
/**/
/**/	if( v_eAt === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute eAt'
/**/		);
/**/	}
/**/
/**/	if( v_eAt === null )
/**/	{
/**/		throw new Error(
/**/			'eAt must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_eAt ) !== 'number'
/**/		||
/**/		Math.floor( v_eAt ) !== v_eAt
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_ePath === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute ePath'
/**/		);
/**/	}
/**/
/**/	if( v_ePath === null )
/**/	{
/**/		throw new Error(
/**/			'ePath must not be null'
/**/		);
/**/	}
/**/	if( v_ePath.reflect !== 'Path' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_retainx === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute retainx'
/**/		);
/**/	}
/**/
/**/	if( v_retainx !== null )
/**/	{
/**/		if(
/**/			typeof( v_retainx ) !== 'number'
/**/		)
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/}

	if(
		inherit
		&&
		v_bAt === inherit.bAt
		&&
		v_bPath.equals( inherit.bPath )
		&&
		v_docTree === inherit.docTree
		&&
		v_eAt === inherit.eAt
		&&
		v_ePath.equals( inherit.ePath )
		&&
		v_retainx === inherit.retainx
	)
	{
		return inherit;
	}

	return (
		new Range(
			_tag,
			v_bAt,
			v_bPath,
			v_docTree,
			v_eAt,
			v_ePath,
			v_retainx
		)
	);
};


/*
| Reflection.
*/
Range.prototype.reflect =
	'Range';


/*
| Sets values by path.
*/
Range.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Range.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
Range.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.bAt === obj.bAt
		&&
		this.bPath.equals( obj.bPath )
		&&
		this.docTree === obj.docTree
		&&
		this.eAt === obj.eAt
		&&
		this.ePath.equals( obj.ePath )
		&&
		this.retainx === obj.retainx
	);
};


} )( );
