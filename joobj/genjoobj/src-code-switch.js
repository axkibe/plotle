/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Code =
		Code || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		629649861;


/*
| Node includes
*/
if( SERVER )
{
	JoobjProto =
		require( '../../src/joobj/proto' );

	Jools =
		require( '../../src/jools/jools' );
}


/*
| Constructor.
*/
var Switch =
Code.Switch =
	function(
		tag,
		ranks,         // twig order, set upon change
		twig,          // twig, set upon change
		v_defaultCase, // the default block
		v_statement    // the statement
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.defaultCase =
		v_defaultCase;

	this.statement =
		v_statement;

	this.twig =
		twig;

	this.ranks =
		ranks;

	Jools.immute( this );
Jools.immute( ranks );
Jools.immute( twig );
};


/*
| Creates a new Switch object.
*/
Switch.create =
Switch.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		key,
		ranks,
		twig,
		twigdup,
		v_defaultCase,
		v_statement;

	if( this !== Switch )
	{
		inherit =
			this;

		twig =
			inherit.twig;

		ranks =
			inherit.ranks;

		twigdup =
			false;

		v_defaultCase =
			this.defaultCase;

		v_statement =
			this.statement;
	}
	else
	{
		twig =
			{ };

		ranks =
			[ ];

		twigdup =
			true;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'defaultCase' :

				if( arg !== undefined )
				{
					v_defaultCase =
						arg;
				}

				break;

			case 'statement' :

				if( arg !== undefined )
				{
					v_statement =
						arg;
				}

				break;

			case 'twig:add' :

				if( !twigdup )
				{
					twig =
						Jools.copy( twig );

					ranks =
						ranks.slice( );

					twigdup =
						true;
				}

				key =
					arg;

				arg =
					arguments[ ++a + 1 ];

				if( twig[ key ] !== undefined )
				{
					throw new Error(
						'key "' + key + '" already in use'
					);
				}

				twig[ key ] =
					arg;

				ranks.push( key );

				break;

			case 'twig:set' :

				if( !twigdup )
				{
					twig =
						Jools.copy( twig );

					ranks =
						ranks.slice( );

					twigdup =
						true;
				}

				key =
					arg;

				arg =
					arguments[ ++a + 1 ];

				if( twig[ key ] === undefined )
				{
					throw new Error(
						'key "' + key + '" not in use'
					);
				}

				twig[ key ] =
					arg;

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

	if( v_defaultCase === undefined )
	{
		v_defaultCase =
			null;
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_defaultCase === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute defaultCase'
/**/		);
/**/	}
/**/
/**/	if( v_defaultCase !== null )
/**/	{
/**/		if( v_defaultCase.reflect !== 'Block' )
/**/		{
/**/			throw new Error(
/**/				'type mismatch'
/**/			);
/**/		}
/**/	}
/**/
/**/	if( v_statement === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute statement'
/**/		);
/**/	}
/**/
/**/	if( v_statement === null )
/**/	{
/**/		throw new Error(
/**/			'statement must not be null'
/**/		);
/**/	}
/**/	if( v_statement.reflect !== 'Term' )
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		!twigdup
		&&
		(
			v_defaultCase === inherit.defaultCase
			||
			(
				v_defaultCase
				&&
				v_defaultCase.equals( inherit.defaultCase )
			)
		)
		&&
		v_statement.equals( inherit.statement )
	)
	{
		return inherit;
	}

	return (
		new Switch(
			_tag,
			ranks,
			twig,
			v_defaultCase,
			v_statement
		)
	);
};


/*
| Reflection.
*/
Switch.prototype.reflect =
	'Switch';


/*
| Sets values by path.
*/
Switch.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Switch.prototype.getPath =
	JoobjProto.getPath;


/*
| .
*/
Switch.prototype.atRank =
	JoobjProto.atRank;


/*
| Checks for equal objects.
*/
Switch.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.twig === obj.twig
		&&
		(
			this.defaultCase === obj.defaultCase ||
			(
				this.defaultCase !== null
				&&
				this.defaultCase.equals( obj.defaultCase )
			)
		)
		&&
		this.statement.equals( obj.statement )
	);
};


/*
| Node export
*/
if( SERVER )
{
	module.exports =
		Switch;
}


} )( );
