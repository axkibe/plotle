/*
| This is an autogenerated file.
|
| DO NOT EDIT!
*/


/*
| Export
*/
var
	Euclid =
		Euclid || { };


/*
| Imports
*/
var
	JoobjProto,
	Jools;


/*
| Capsule
*/
(function( ) {
'use strict';


var
	_tag =
		443783753;


/*
| Constructor.
*/
var Font =
Euclid.Font =
	function(
		tag,
		v_align,  // horizonal alignment
		v_base,   // vertical alignment
		v_family, // font family
		v_fill,   // font color
		v_size    // font size
	)
{

/**/if( CHECK )
/**/{
/**/	if( tag !== _tag )
/**/	{
/**/		throw new Error(
/**/			'tag mismatch'
/**/		);
/**/	}
/**/}

	this.align =
		v_align;

	this.base =
		v_base;

	this.family =
		v_family;

	this.fill =
		v_fill;

	this.size =
		v_size;

	Jools.immute( this );
};


/*
| Creates a new Font object.
*/
Font.create =
Font.prototype.create =
	function(
		// free strings
	)
{
	var
		inherit,
		v_align,
		v_base,
		v_family,
		v_fill,
		v_size;

	if( this !== Font )
	{
		inherit =
			this;

		v_align =
			this.align;

		v_base =
			this.base;

		v_family =
			this.family;

		v_fill =
			this.fill;

		v_size =
			this.size;
	}

	for(
		var a = 0, aZ = arguments.length;
		a < aZ;
		a += 2
	)
	{
		var
			arg =
				arguments[ a + 1 ];

		switch( arguments[ a ] )
		{
			case 'align' :

				if( arg !== undefined )
				{
					v_align =
						arg;
				}

				break;

			case 'base' :

				if( arg !== undefined )
				{
					v_base =
						arg;
				}

				break;

			case 'family' :

				if( arg !== undefined )
				{
					v_family =
						arg;
				}

				break;

			case 'fill' :

				if( arg !== undefined )
				{
					v_fill =
						arg;
				}

				break;

			case 'size' :

				if( arg !== undefined )
				{
					v_size =
						arg;
				}

				break;

			default :

/**/			if( CHECK )
/**/			{
/**/				throw new Error(
/**/					'invalid argument: ' + arguments[ a ]
/**/				);
/**/			}
		}
	}

/**/if( CHECK )
/**/{
/**/
/**/	if( v_align === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute align'
/**/		);
/**/	}
/**/
/**/	if( v_align === null )
/**/	{
/**/		throw new Error(
/**/			'align must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_align ) !== 'string'
/**/		&&
/**/		!( v_align instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_base === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute base'
/**/		);
/**/	}
/**/
/**/	if( v_base === null )
/**/	{
/**/		throw new Error(
/**/			'base must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_base ) !== 'string'
/**/		&&
/**/		!( v_base instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_family === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute family'
/**/		);
/**/	}
/**/
/**/	if( v_family === null )
/**/	{
/**/		throw new Error(
/**/			'family must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_family ) !== 'string'
/**/		&&
/**/		!( v_family instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_fill === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute fill'
/**/		);
/**/	}
/**/
/**/	if( v_fill === null )
/**/	{
/**/		throw new Error(
/**/			'fill must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_fill ) !== 'string'
/**/		&&
/**/		!( v_fill instanceof String )
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/
/**/	if( v_size === undefined )
/**/	{
/**/		throw new Error(
/**/			'undefined attribute size'
/**/		);
/**/	}
/**/
/**/	if( v_size === null )
/**/	{
/**/		throw new Error(
/**/			'size must not be null'
/**/		);
/**/	}
/**/	if(
/**/		typeof( v_size ) !== 'number'
/**/	)
/**/	{
/**/		throw new Error(
/**/			'type mismatch'
/**/		);
/**/	}
/**/}

	if(
		inherit
		&&
		v_align === inherit.align
		&&
		v_base === inherit.base
		&&
		v_family === inherit.family
		&&
		v_fill === inherit.fill
		&&
		v_size === inherit.size
	)
	{
		return inherit;
	}

	return (
		new Font(
			_tag,
			v_align,
			v_base,
			v_family,
			v_fill,
			v_size
		)
	);
};


/*
| Reflection.
*/
Font.prototype.reflect =
	'Font';


/*
| Sets values by path.
*/
Font.prototype.setPath =
	JoobjProto.setPath;


/*
| Gets values by path.
*/
Font.prototype.getPath =
	JoobjProto.getPath;


/*
| Checks for equal objects.
*/
Font.prototype.equals =
	function(
		obj
	)
{
	if( this === obj )
	{
		return true;
	}

	if( !obj )
	{
		return false;
	}

	return (
		this.align === obj.align
		&&
		this.base === obj.base
		&&
		this.family === obj.family
		&&
		this.fill === obj.fill
		&&
		this.size === obj.size
	);
};


} )( );
